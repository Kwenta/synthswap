import { expect } from "chai";
import { ethers, artifacts, waffle, network } from "hardhat";
import dotenv from "dotenv";

dotenv.config();

const TEST_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"; // Make sure it has ETH
const SYNTHETIX_PROXY = "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F";
const SUSD_PROXY = "0x4d8dbd193d89b7b506be5dc9db75b91da00d6a1d"; //"0x57Ab1E02fEE23774580C119740129eAC7081e9D3"; TODO: figure out why calling proxy doesn't work
const SETH_PROXY = "0x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb";
const AGGREGATION_ROUTER_V3 = "0x11111112542D85B3EF69AE05771c2dCCff4fAa26";
const TRANSACTION_PAYLOAD_1INCH =
    "0x7c02520000000000000000000000000027239549dd40e1d60f5b80b0c4196923745b1fd200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f5100000000000000000000000027239549dd40e1d60f5b80b0c4196923745b1fd2000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000148b78263105efae3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000f80758ab42c3b07da84053fd88804bcb6baa4b5c000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4b757fed6000000000000000000000000f80758ab42c3b07da84053fd88804bcb6baa4b5c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000002dc6c027239549dd40e1d60f5b80b0c4196923745b1fd200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000184b3af37c00000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000002400000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f51000000000000000000000000000000010000000000000000000000000000000100000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const SETH_BYTES32 =
    "0x7345544800000000000000000000000000000000000000000000000000000000";

describe("Integration: Test Synthswap.sol", function () {
    before(async () => {
        await network.provider.request({
            method: "hardhat_reset",
            params: [
                {
                    forking: {
                        jsonRpcUrl: process.env.ARCHIVE_NODE_URL,
                        blockNumber: 13143718,
                    },
                },
            ],
        });

        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [TEST_ADDRESS],
        });
    });

    it("Test swap of ETH into sETH", async () => {
        //Deploy
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            ethers.constants.AddressZero,
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            ethers.constants.AddressZero,
            AGGREGATION_ROUTER_V3
        );
        await synthswap.deployed();

        // Replace 0xaaa... placeholder from generated payload with deployed Synthswap address.
        // This is because when generating the 1inch payload we need to specify a destination receiver address,
        // which is our Synthswap contract, and this is not know ahead of time.
        const TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT =
            TRANSACTION_PAYLOAD_1INCH.replace(
                /aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/g,
                synthswap.address.substring(2) // Slice off "0x"
            );

        const signer = await ethers.getSigner(TEST_ADDRESS);

        await synthswap
            .connect(signer) // Call swap from TEST_ADDRESS
            .swapIntoWith1Inch(
                TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT,
                SETH_BYTES32,
                {
                    gasLimit: 1000000, // If tx reverts increase gas limit
                    value: ethers.BigNumber.from("100000000000000000"),
                }
            );

        // Check to see if sETH balance increased
        const IERC20ABI = (await artifacts.readArtifact("IERC20")).abi;
        const mockProvider = waffle.provider;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, mockProvider);
        expect(await sETH.balanceOf(TEST_ADDRESS)).to.match(
            /101602401655988153/ // Specific output amount at current block.
        );
    });
});
