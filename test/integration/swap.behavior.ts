import { expect } from "chai";
import { ethers, artifacts, waffle, network } from "hardhat";
import dotenv from "dotenv";

dotenv.config();

/*

##### OVERVIEW #####

SynthSwap introduces a simple way for a user to swap:
1. ETH -> Synth
2. 1inch supported ERC20 token -> Synth
3. Synth -> ETH
4. Synth -> 1inch supported ERC20 token

Understand that SynthSwap uses Synthetix and 1inch for swaps. Not every swap needs a Synthetix exchange. An
example would be sUSD -> ERC20 token or ERC20 token -> sUSD. This is because routes ERC20 <-> sUSD are
supported on 1inch, and Synthetix is only needed when swapping to and from any Synth <-> sUSD.

1inch uses AggregationRouterV4 functions `swap()` and `uniswapV3Swap()` when executing swaps.
SynthSwap requires data from 1inch API encoding data specifying one of the two swap function calls above before it can 
execute `swapInto()` or `swapOutOf()`. See specifics below:

1. `swap()` takes a `data` parameter which specifies the swap route, among other things. This `data` must be
    fetched via 1inch API call, which will return response data that must be decoded to get all parameters needed.
    It will be helpful to understand by looking at this link, which provides decoded and encoded versions of data needed:
    https://dashboard.tenderly.co/tx/optimistic/0x63755207f57d19b7616207ce55398c4b0b1925d99c71ba02ad7bbd37ec718313

2. `uniswapV3Swap()` does not take in a `data` parameter like `swap` but rather a `pools` array specifying
    which uniswapV3 pools to swap between. Effectively, `pools` also determines route data. Calling the same
    API mentioned above will return response data necessary to then pass to SynthSwap functions which are
    specific to `uniswapV3Swap()` calls. It will be helpful to understand by looking at this link, which 
    provides decoded and encoded versions of data needed:
    https://dashboard.tenderly.co/tx/optimistic/0xcf7042028b3b97556b236837b48a6cca54f1870ef6c3adf42556941a1055184b

NOTICE:
With `swap()`, we do not uses raw input (i.e. calldata including function selector), but rather, the front-end is
responsible for generating all parameters needed by `AggregationRouterV4.swap()` (see interface) and the `data` parameter
must be fetched via decoding the response from 1inch API call.

With `uniswapV3Swap()`, the process is less complicated. SynthSwap ultimately takes in the raw input (i.e. calldata 
including function selector) and uses `.call()` to hit the AggregationRouterV4 address to execute the swap.

##### FLOW #####

(X, Y, Z are used as amount variables)

## SwapInto (ERC20 token -> Synth (not sUSD)):
// prior to swapInto being called
1.2. Query 1inch api swap with X ERC20 token swapped for sUSD
1.3 Use above ^^ api response data to:
    1.3.1 determine if swap data is `swap()` or `uniswapV3Swap()`
    1.3.2 decode data if `swap()`
    1.3.3 pass above data in correct format into swapInto function
1.4. Approve SynthSwap to spend X amount of ERC20 token

// calling swapInto
2.1. Call swapInto with correct data
2.2. 1inch will use `data` and execute swap from ERC20 token to sUSD (returning Y sUSD)
2.3. Synthetix will swap will swap Y sUSD for Z destination Synth
2.4. final destination Synth will be sent to function caller


## SwapOutOf flow (Synth (not sUSD) -> ERC20 token):
// prior to swapOutOf being called
1.1. Query exchange rate via IExchangeRates.effectiveValue() for X amount of Source Synth -> sUSD (Y = amount of sUSD expected to be returned)
1.2. Query 1inch api swap with Y sUSD swapped for final destination token
1.3 Use above ^^ api response data to:
    1.3.1 determine if swap data is `swap()` or `uniswapV3Swap()`
    1.3.2 decode data if `swap()`
    1.3.3 pass above data in correct format into swapOutOf function
1.4. Approve SynthSwap to spend X amount of Source Synth 

// calling swapOutOf
2.1. Call swapOutOf with amount set to X
2.2. Synthetix swap will return Y sUSD (hopefully), which will match SwapDescription.amount encoded in `data`
2.3. 1inch will use `data` and execute swap for Y sUSD for Z destination token
2.4. final destination token will be sent to function caller

##### ISSUES #####

## General
Problem (swapOutOf)
1. What happens IF Y, as approximated by calling IExchangeRates.effectiveValue(), is
   different from what is returned in (2.2) Z?

Solution:
1. Both swapOutOf and uniswapSwapOutOf check sUSD balance after completing swap and send any
   excess sUSD to treasury address

Problem 
1. 1inch is pretty buggy swapping with sUSD. Recalculations, slippage, etc are very common

Problem
Is there a legal issue with using 1inch and not restricting users within certain regions?

Problem
Frontend consideration: When a user wants to perform a swap, front-end must make an 
API call to 1inch for part or all of the swap (i.e. if going to or from sUSD only then it is whole swap).
1inch API may return either data for a `swap()` or `uniswapV3Swap()` function call to execute the swap.
Depending on which is returned, the front-end will either need to one of four external functions SynthSwap
provides.

## Testing
Problem:
As stated many times above, the data returned from 1inch API can not be restricted beforehand to 
`swap()` nor `uniswapV3Swap()`, thus, getting data to test all edge cases in swap.behavior might not
be possible.

Solution:
The fundamental logic used in all four external functions in SynthSwap are virtually the same. 
The above tests cover all four use cases for a user (outlined above). Further testing might be best
achieved via DevDAO

*/

// testing
const WETH_ADDRESS = "0x4200000000000000000000000000000000000006";
const ETH_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
const TEST_ADDRESS = "0x42f9134E9d3Bf7eEE1f8A5Ac2a4328B059E7468c"; // EOA
const TEST_ADDRESS2 = "0xB483F21dC981D2D1E483192a15FcAc281669bF73"; // EOA
const TEST_VALUE_1 = ethers.BigNumber.from("10000000000000000");
const TEST_VALUE_2 = ethers.BigNumber.from("28000000000000000000");
const TREASURY_DAO = "0x6e1768574dC439aE6ffCd2b0A0f218105f2612c6" // Random EOA for testing

// synthetix
const VOLUME_REWARDS = ethers.constants.AddressZero;
const ADDRESS_RESOLVER = "0x95A6a3f44a70172E7d50a9e28c85Dfd712756B8C";
// synthetix: proxy
const SETH_PROXY = "0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49";
const SUSD_PROXY = "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9";
const SLINK_PROXY = "0xc5Db22719A06418028A40A9B5E9A7c02959D0d08";
// synthetix: key
const SETH_BYTES32 = ethers.utils.formatBytes32String("sETH");
const SLINK_BYTES32 = ethers.utils.formatBytes32String("sLINK");
const SUSD_BYTES32 = ethers.utils.formatBytes32String("sUSD");

// 1inch
const AGGREGATION_ROUTER_V4 = "0x1111111254760F7ab3F16433eea9304126DCd199";

// 1inch swap() data
// https://dashboard.tenderly.co/tx/optimistic/0x0c9a18a7f145ab6b64098de909d18a2344dd8f409a19fd2d56936cc36fc50720
const ETH_TO_SUSD_ROUTE = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000009c00000000000000000000000000000000000000000000000000000000000000ca00000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000800000000000000000000000c858a329bf053be78d6239c4a4343b8fbd21472b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000420000000000000000000000000000000000000600000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000364ad0e7b1a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000030000000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58eeb5625d900000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000008000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000843dfaab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000003200000000000000000000000000000032800000000000000000000000e7ee03b72a89f87d161425e42548bd5492d06679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000024432ce0a7c0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab100000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4059712240000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb9470000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d90000000000000000000000000000000000000000000000018d6e923bd8cb95880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064d1660f990000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d90000000000000000000000001111111254760f7ab3f16433eea9304126dcd19900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
// https://dashboard.tenderly.co/tx/optimistic/0x63755207f57d19b7616207ce55398c4b0b1925d99c71ba02ad7bbd37ec718313
const WETH_TO_SUSD_ROUTE = "";
// https://dashboard.tenderly.co/tx/optimistic/0x41a4c66f8b0827818f6d2283a0026dc87f3a93b638f07184e8c7d6e66acd0684
const SUSD_TO_WETH_ROUTE = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000be0800000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000018493fba64ef0000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000364ad0e7b1a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da100000000000000000000000000000032000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064eb5625d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000008000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000843dfaab0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000003200000000000000000000000000000032800000000000000000000000c858a329bf053be78d6239c4a4343b8fbd21472b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000420000000000000000000000000000000000000600000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000024432ce0a7c0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4059712240000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb94700000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000024e0ccf2c9dab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016414284aaba9059cbb0000000000000000000000001111111254760f7ab3f16433eea9304126dcd19900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
// https://dashboard.tenderly.co/tx/optimistic/0xa2c8137680efba4b4aa15b0cccd5e51d65785b35ad1747f6ac07bd3a95feec2b
const SUSD_TO_WETH_ROUTE2 = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000da000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c8414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000240000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000000000010000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000b64aade5c4900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000042000000000000000000000000000000000000060000000000000000000000006e1768574dc439ae6ffcd2b0a0f218105f2612c600000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f000000000000000000000000000000000000000000000000000324d41bb8f03000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000084eb2c5c23999b3ddc87be10f15ccec5d22c7d97000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bfd8b6c1df00000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000042000000000000000000000000000000000000060000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000000000020000000000000000000000000000001e28000000000000000000000002e80d5a7b3c613d854ee43243ff09808108561eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000042000000000000000000000000000000000000060000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000032000000000000000000000000000000328000000000000000000000000392b358ce4547601befa962680bede836606ae2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000042000000000000000000000000000000000000060000000000000000000000008700daec35af8ff88c16bdf0418774cb3d7599b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000008700daec35af8ff88c16bdf0418774cb3d7599b40000000000000000000000000000003200000000000000000000000000000032800000000000000000000000fea834a5c47b923add607cc5b96288d18ffb9c3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000042000000000000000000000000000000000000060000000000000000000000008700daec35af8ff88c16bdf0418774cb3d7599b4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000ac414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000240000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000000000090000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000009a4aade5c4900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000042000000000000000000000000000000000000060000000000000000000000006e1768574dc439ae6ffcd2b0a0f218105f2612c600000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f000000000000000000000000000000000000000000000000001c49895a86a74200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000005e0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000000001c2000000000000000000000000000001c2800000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000003200000000000000000000000000000032800000000000000000000000c22662b904d98e45f89e030201355c3e372cc819000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000068f180fcce6836688e9084f035309e29bf0a2095000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000068f180fcce6836688e9084f035309e29bf0a2095000000000000000000000000000000320000000000000000000000000000003280000000000000000000000085c31ffa3706d1cce9d525a00f1c7d4a2911754c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000420000000000000000000000000000000000000600000000000000000000000068f180fcce6836688e9084f035309e29bf0a209500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000024432ce0a7c0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4059712240000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb947000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000206738c3cd6f440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016414284aaba9059cbb0000000000000000000000001111111254760f7ab3f16433eea9304126dcd19900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
// https://api.1inch.io/v4.0/10/swap?fromTokenAddress=0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9&toTokenAddress=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&amount=28000000000000000000&fromAddress=0xB483F21dC981D2D1E483192a15FcAc281669bF73&slippage=1&disableEstimate=true
const SUSD_TO_ETH_ROUTE = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000ae0800000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000018493fba64ef0000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000364ad0e7b1a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000daeb5625d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000008000000000000000000000001337bedc9d22ecbe766df105c9623922a27963ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000843dfaab0000000000000000000000000000000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000004400000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000003200000000000000000000000000000032000000000000000000000000c858a329bf053be78d6239c4a4343b8fbd21472b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000094bc2a1c732bcad7343b25af48385fe76e08734f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000420000000000000000000000000000000000000600000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014414284aabe1a7d4d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018414284aab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000001111111254760f7ab3f16433eea9304126dcd19900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"


const forkAndImpersonateAtBlock = async (block: number, account: string) => {
    await network.provider.request({
        method: "hardhat_reset",
        params: [
            {
                forking: {
                    jsonRpcUrl: process.env.ARCHIVE_NODE_URL_L2,
                    blockNumber: block,
                },
            },
        ],
    });

    await network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [account],
    });
};

describe("Integration: Test Synthswap.sol", function () {
    it("Test SynthSwap deployment", async () => {
        await forkAndImpersonateAtBlock(6950543, TEST_ADDRESS);

        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();
        expect(synthswap.address).to.exist;
    });

    ////////////////////////
    ////// swapInto() //////
    ////////////////////////

    it("Test swap ETH into sETH", async () => {
        await forkAndImpersonateAtBlock(6950543, TEST_ADDRESS);

        // ETH -(1inchAggregator)-> sUSD -(Synthetix)-> sETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        const preBalance = await sETH.balanceOf(TEST_ADDRESS);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x26271dfddbd250014f87f0f302c099d5a798bab1";
        const swapDescription = {
            srcToken: ETH_ADDRESS,
            dstToken: SUSD_PROXY,
            srcReceiver: "0x26271dfddbd250014f87f0f302c099d5a798bab1",
            dstReceiver: synthswap.address,
            amount: TEST_VALUE_1,
            minReturnAmount: ethers.BigNumber.from("28087090916131374921"),
            flags: 0,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, ETH_TO_SUSD_ROUTE]
		);

        // swap
        const signer = await ethers.getSigner(TEST_ADDRESS);
		await synthswap.connect(signer).swapInto(
            SETH_BYTES32,
            SETH_PROXY,
            data, 
            {
				value: TEST_VALUE_1,
            }
        );
        
        const postBalance = await sETH.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    it("Test swap ETH into sLINK", async () => {
        await forkAndImpersonateAtBlock(6950543, TEST_ADDRESS);

        // ETH -(1inchAggregator)-> sUSD -(Synthetix)-> sLINK
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sLINK = new ethers.Contract(SLINK_PROXY, IERC20ABI, waffle.provider);
        const preBalance = await sLINK.balanceOf(TEST_ADDRESS);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x26271dfddbd250014f87f0f302c099d5a798bab1";
        const swapDescription = {
            srcToken: ETH_ADDRESS,
            dstToken: SUSD_PROXY,
            srcReceiver: "0x26271dfddbd250014f87f0f302c099d5a798bab1",
            dstReceiver: synthswap.address,
            amount: TEST_VALUE_1,
            minReturnAmount: ethers.BigNumber.from("28087090916131374921"),
            flags: 0,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, ETH_TO_SUSD_ROUTE]
		);

        // swap
        const signer = await ethers.getSigner(TEST_ADDRESS);
		await synthswap.connect(signer).swapInto(
            SLINK_BYTES32,
            SLINK_PROXY,
            data, 
            {
				value: TEST_VALUE_1,
            }
        );
        
        const postBalance = await sLINK.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    it("Test swap WETH into sLINK", async () => {
        await forkAndImpersonateAtBlock(7161862, TEST_ADDRESS);

        // WETH -(1inchAggregator)-> sUSD -(Synthetix)-> sLINK
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sLINK = new ethers.Contract(SLINK_PROXY, IERC20ABI, waffle.provider);
        const preBalance = await sLINK.balanceOf(TEST_ADDRESS);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x94bc2a1c732bcad7343b25af48385fe76e08734f";
        const swapDescription = {
            srcToken: WETH_ADDRESS,
            dstToken: SUSD_PROXY,
            srcReceiver: "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
            dstReceiver: synthswap.address,
            amount: TEST_VALUE_1,
            minReturnAmount: ethers.BigNumber.from("28748900773010456160"),
            flags: 5,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, WETH_TO_SUSD_ROUTE]
		);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS);
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, waffle.provider);
        await WETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);

        // swap
		await synthswap.connect(signer).swapInto(
            SLINK_BYTES32,
            SLINK_PROXY,
            data
        );
        
        const postBalance = await sLINK.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    it("Test swap WETH into sUSD", async () => {
        await forkAndImpersonateAtBlock(7161861, TEST_ADDRESS);

        // WETH -(1inchAggregator)-> sUSD
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sUSD = new ethers.Contract(SUSD_PROXY, IERC20ABI, waffle.provider);
        const preBalance = await sUSD.balanceOf(TEST_ADDRESS);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x94bc2a1c732bcad7343b25af48385fe76e08734f";
        const swapDescription = {
            srcToken: WETH_ADDRESS,
            dstToken: SUSD_PROXY,
            srcReceiver: "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
            dstReceiver: synthswap.address,
            amount: TEST_VALUE_1,
            minReturnAmount: ethers.BigNumber.from("28748900773010456160"),
            flags: 5,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, WETH_TO_SUSD_ROUTE]
		);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS);
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, waffle.provider);
        await WETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);

        // swap
		await synthswap.connect(signer).swapInto(
            SUSD_BYTES32,
            SUSD_PROXY,
            data
        );
        
        const postBalance = await sUSD.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    ////////////////////////
    ////// swapOutOf() /////
    ////////////////////////

    it("Test swap sUSD into WETH", async () => {   
        await forkAndImpersonateAtBlock(7247381, TEST_ADDRESS2);

        // sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, waffle.provider);
        const preBalance = await WETH.balanceOf(TEST_ADDRESS2);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x94bc2a1c732bcad7343b25af48385fe76e08734f";
        const swapDescription = {
            srcToken: SUSD_PROXY,
            dstToken: WETH_ADDRESS,
            srcReceiver: "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
            dstReceiver: TEST_ADDRESS2,
            amount: TEST_VALUE_2,
            minReturnAmount: ethers.BigNumber.from("10068861912463352"),
            flags: 4,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, SUSD_TO_WETH_ROUTE]
		);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS2);
        const sUSD = new ethers.Contract(SUSD_PROXY, IERC20ABI, waffle.provider);
        await sUSD.connect(signer).approve(synthswap.address, TEST_VALUE_2);

        // swap
		await synthswap.connect(signer).swapOutOf(
            SUSD_BYTES32,
            SUSD_PROXY,
            TEST_VALUE_2,
            data
        );
        
        const postBalance = await WETH.balanceOf(TEST_ADDRESS2);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    it("Test swap sETH into WETH", async () => {
        await forkAndImpersonateAtBlock(7327867, TEST_ADDRESS2);

        // sETH -(Synthetix)-> sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();
        
        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, waffle.provider);
        const preBalance = await WETH.balanceOf(TEST_ADDRESS2);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x94bc2a1c732bcad7343b25af48385fe76e08734f";
        const swapDescription = {
            srcToken: SUSD_PROXY,
            dstToken: WETH_ADDRESS,
            srcReceiver: "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
            dstReceiver: TEST_ADDRESS2,
            // amount of sUSD received from Synthetix swap (will need to be pre-determined via ExchangeRates)
            amount: ethers.BigNumber.from("24000000000000000000"), 
            minReturnAmount: ethers.BigNumber.from("8847071972923250"),
            flags: 5,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, SUSD_TO_WETH_ROUTE2]
		);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS2);
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        await sETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);

        // swap
		await synthswap.connect(signer).swapOutOf(
            SETH_BYTES32,
            SETH_PROXY,
            TEST_VALUE_1,
            data
        );
        
        const postBalance = await WETH.balanceOf(TEST_ADDRESS2);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    // FAILS: needs valid swap data for sETH -> ETH
    it.skip("Test swap sETH into ETH", async () => {
        await forkAndImpersonateAtBlock(7417356, TEST_ADDRESS2);

        // sETH -(Synthetix)-> sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();
        
        // pre-swap balance
        const preBalance = await waffle.provider.getBalance(TEST_ADDRESS2);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = "0x94bc2a1c732bcad7343b25af48385fe76e08734f";
        const swapDescription = {
            srcToken: SUSD_PROXY,
            dstToken: ETH_ADDRESS,
            srcReceiver: "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
            dstReceiver: TEST_ADDRESS2,
            // amount of sUSD received from Synthetix swap (will need to be pre-determined via ExchangeRates)
            amount: TEST_VALUE_2, 
            minReturnAmount: ethers.BigNumber.from("1"),
            flags: 4,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, SUSD_TO_ETH_ROUTE]
		);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS2);
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        await sETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);

        // swap
		await synthswap.connect(signer).swapOutOf(
            SETH_BYTES32,
            SETH_PROXY,
            TEST_VALUE_1,
            data
        );
        
        const postBalance = await waffle.provider.getBalance(TEST_ADDRESS2);
        expect(postBalance).to.be.above(preBalance);
    });

    ////////////////////////
    /// uniswapSwapInto ////
    ////////////////////////

    // TODOs

    ////////////////////////
    /// uniswapSwapOutOf ///
    ////////////////////////

    it("Test uniswapSwapOutOf sETH into ETH", async () => {
        await forkAndImpersonateAtBlock(7347649, TEST_ADDRESS2);

        // sETH -(Synthetix)-> sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();
        
        // pre-swap balance
        const preBalance = await waffle.provider.getBalance(TEST_ADDRESS2);

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS2);
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        await sETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);
        
        const expectedAmountOfSUSDFromSwap = ethers.BigNumber.from("28000000000000000000");
        const data = "0xe449022e0000000000000000000000000000000000000000000000014d1120d7b16000000000000000000000000000000000000000000000000000000020523ac1e3127700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4a0000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c0e26b9977";

        // swap
		await synthswap.connect(signer).uniswapSwapOutOf(
            SETH_BYTES32,
            SETH_PROXY,
            ETH_ADDRESS,
            TEST_VALUE_1,
            expectedAmountOfSUSDFromSwap,
            data
        );
        
        const postBalance = await waffle.provider.getBalance(TEST_ADDRESS2);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(600000);

    it("Test uniswapSwapOutOf sends sUSD to Treasury", async () => {
        await forkAndImpersonateAtBlock(7347649, TEST_ADDRESS2);

        // sETH -(Synthetix)-> sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SUSD_PROXY,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER,
            VOLUME_REWARDS,
            TREASURY_DAO
        );
        await synthswap.deployed();

        // must approve synthswap to swap tokens
        const signer = await ethers.getSigner(TEST_ADDRESS2);
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        await sETH.connect(signer).approve(synthswap.address, TEST_VALUE_1);
        
        const expectedAmountOfSUSDFromSwap = ethers.BigNumber.from("28000000000000000000");
        const data = "0xe449022e0000000000000000000000000000000000000000000000014d1120d7b16000000000000000000000000000000000000000000000000000000020523ac1e3127700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4a0000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c0e26b9977";
        
        // There IS a discrepancy between X amount of sUSD received from
        // Synthetix exchange (TEST_VALUE_1 sETH -> X sUSD)
        // and the expectedAmountOfSUSDFromSwap used for 1inch.
        // This can occur in either `swapOutOf()` or `uniswapSwapOutOf()`
        // because expectedAmountOfSUSDFromSwap is not guaranteed to equal X sUSD
        // received from Synthetix
        const sUSD = new ethers.Contract(SUSD_PROXY, IERC20ABI, waffle.provider);
        const preSUSDBalanceOfTreasury = await sUSD.balanceOf(TREASURY_DAO);

        // swap
		await synthswap.connect(signer).uniswapSwapOutOf(
            SETH_BYTES32,
            SETH_PROXY,
            ETH_ADDRESS,
            TEST_VALUE_1,
            expectedAmountOfSUSDFromSwap,
            data
        );

        const postSUSDBalanceOfTreasury = await sUSD.balanceOf(TREASURY_DAO);
        
        expect(postSUSDBalanceOfTreasury).to.be.above(preSUSDBalanceOfTreasury);

    }).timeout(600000);
});