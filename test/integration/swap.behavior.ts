import { expect } from "chai";
import { ethers, artifacts, waffle, network } from "hardhat";
import dotenv from "dotenv";

dotenv.config();

const VOLUME_REWARDS = ethers.constants.AddressZero;
const SYNTHETIX_PROXY = "0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4"; // ProxyERC20
const SUSD_PROXY = "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9"; // ProxyERC20sUSD
const AGGREGATION_ROUTER_V4 = "0x1111111254760F7ab3F16433eea9304126DCd199";
const ADDRESS_RESOLVER = "0x95A6a3f44a70172E7d50a9e28c85Dfd712756B8C";
const TEST_ADDRESS = "0x9aA1df3db80d7A8168FcDCaC79d3e9663Dc09E4A";
const SETH_PROXY = "0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49";
const SETH_BYTES32 = "0x7345544800000000000000000000000000000000000000000000000000000000";
const WETH_ADDRESS = "0x4200000000000000000000000000000000000006";

/* https://api.1inch.exchange/v4.0/10/swap?
 * fromTokenAddress=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&
 * toTokenAddress=0x8c6f28f2f1a3c87f0f938b96d27520d9751ec8d9&
 * amount=1000000000000000000&
 * fromAddress=0x9aA1df3db80d7A8168FcDCaC79d3e9663Dc09E4A&
 * slippage=50&
 * destReceiver=0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&
 * disableEstimate=true
 */
const TRANSACTION_PAYLOAD_1INCH_ETH_TO_SUSD = 
    "0x7c02520000000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000019ca71f4a26ad5e7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000005800000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000080000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000004200000000000000000000000000000000000006000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da100000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022414284aab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000003200000000000000000000000000000032800000000000000000000000adb35413ec50e0afe41039eac8b930d313e94fa4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000026271dfddbd250014f87f0f302c099d5a798bab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d900000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064d1660f990000000000000000000000008c6f28f2f1a3c87f0f938b96d27520d9751ec8d90000000000000000000000001111111254760f7ab3f16433eea9304126dcd19900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08";
const TRANSACTION_PAYLOAD_1INCH_WETH_TO_SUSD = 
    "";

describe("Integration: Test Synthswap.sol", function () {
    before(async () => {
        await network.provider.request({
            method: "hardhat_reset",
            params: [
                {
                    forking: {
                        jsonRpcUrl: process.env.ARCHIVE_NODE_URL,
                        blockNumber: 6451405,
                    },
                },
            ],
        });

        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [TEST_ADDRESS],
        });
        
        await network.provider.request({
            method: "hardhat_setBalance",
            params: [TEST_ADDRESS, ethers.utils.parseEther("10").toHexString()],
        });
    });








    it("Test SynthSwap deployment", async () => {
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();
        expect(synthswap.address).to.exist;
    });











    it.skip("Test swap ETH into sETH", async () => {
        // ETH -(1inchAggregator)-> sUSD -(Synthetix)-> sETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();

        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const mockProvider = waffle.provider;
        const signer = await ethers.getSigner(TEST_ADDRESS);

        // pre-swap balance
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, mockProvider);
        const preBalance = await sETH.balanceOf(TEST_ADDRESS);

        // Replace 0xaaa... placeholder from generated payload with deployed SynsthSwap address.
        // This is because when generating the 1inch payload we need to specify a destination receiver address,
        // which is our SynthSwap contract, and this is not known ahead of time.
        const TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT =
            TRANSACTION_PAYLOAD_1INCH_ETH_TO_SUSD.replace(
                /aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/g,
                synthswap.address.substring(2) // Slice off "0x"
            );

        await synthswap
            .connect(signer) // Call swap from TEST_ADDRESS
            .swapInto(
                SETH_BYTES32,
                TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT,
                {
                    // For optimism you need to set fixed gasPrice and higher gasLimit
                    gasPrice: ethers.utils.parseUnits('1', 'gwei'),
                    gasLimit: 30000000, // max gasLimit per block
                    value: "10000000000000000"
                }
            );
        
        // post-swap balance
        const postBalance = await sETH.balanceOf(TEST_ADDRESS);

        // Check ETH balance increased
        expect(postBalance).to.be.above(preBalance);
        //expect(postBalance.toString()).to.equal("98802617794637161");
    }).timeout(200000);











    it("Test swap WETH into sETH", async () => {
        // WETH -(1inchAggregator)-> sUSD -(Synthetix)-> sETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();

        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const mockProvider = waffle.provider;
        const signer = await ethers.getSigner(TEST_ADDRESS);

        // pre-swap balance
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, mockProvider);
        const preBalance = await sETH.balanceOf(TEST_ADDRESS);
        
        // approve AGGREGATION_ROUTER_V4 to spend WETH
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, mockProvider);
        await WETH.connect(signer).approve(AGGREGATION_ROUTER_V4, ethers.BigNumber.from("10000000000000000"));

        // confirm allowance
        const allowance = await WETH.allowance(signer.address, AGGREGATION_ROUTER_V4);
        expect(allowance).to.equal(ethers.BigNumber.from("10000000000000000").toString());

        // Replace 0xaaa... placeholder from generated payload with deployed SynsthSwap address.
        // This is because when generating the 1inch payload we need to specify a destination receiver address,
        // which is our SynthSwap contract, and this is not known ahead of time.
        const TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT =
            TRANSACTION_PAYLOAD_1INCH_WETH_TO_SUSD.replace(
                /aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/g,
                synthswap.address.substring(2) // Slice off "0x"
            );

        await synthswap
            .connect(signer) // Call swap from TEST_ADDRESS
            .swapInto(
                SETH_BYTES32,
                TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT,
                {
                    // For optimism you need to set fixed gasPrice and higher gasLimit
                    gasPrice: ethers.utils.parseUnits('1', 'gwei'),
                    gasLimit: 30000000, // max gasLimit per block
                    //value: ethers.BigNumber.from("10000000000000000"), 
                }
            );
        
        // post-swap balance
        const postBalance = await sETH.balanceOf(TEST_ADDRESS);

        // Check ETH balance increased
        expect(postBalance).to.be.above(preBalance);
        //expect(postBalance.toString()).to.equal("98802617794637161");
    }).timeout(200000);










    it.skip("Test swap sETH to WETH", async () => { 
        // sETH -(Synthetix)-> sUSD -(1inchAggregator)-> WETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();

        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol")).abi;
        const mockProvider = waffle.provider;
        const signer = await ethers.getSigner(TEST_ADDRESS);
        
        // pre-swap balance
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, mockProvider);
        const preBalance = await WETH.balanceOf(TEST_ADDRESS);

        // Replace 0xaaa... placeholder from generated payload with deployed SynthSwap address.
        // This is because when generating the 1inch payload we need to specify a destination receiver address,
        // which is our SynthSwap contract, and this is not known ahead of time.
        var TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT =
            TRANSACTION_PAYLOAD_1INCH_WETH_TO_SUSD.replace(
                /aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/g,
                synthswap.address.substring(2) // Slice off "0x"
            );

        await synthswap
            .connect(signer) // Call swap from TEST_ADDRESS
            .swapOutOf(
                SETH_BYTES32,
                1,
                TRANSACTION_PAYLOAD_1INCH_WITH_DEST_AS_CONTRACT,
                {
                    // For optimism you need to set fixed gasPrice and higher gasLimit
                    gasPrice: ethers.utils.parseUnits('1', 'gwei'),
                    gasLimit: 30000000, // max gasLimit per block
                }
            );
        
        // post-swap balance
        const postBalance = await WETH.balanceOf(TEST_ADDRESS);

        // Check ETH balance increased
        expect(postBalance).to.be.above(preBalance);
        //expect(postBalance.toString()).to.equal("98802617794637161");
    }).timeout(200000);
});