import { expect } from "chai";
import { ethers, artifacts, waffle, network } from "hardhat";
import dotenv from "dotenv";

dotenv.config();

// testing
const WETH_ADDRESS = "0x4200000000000000000000000000000000000006";
const ETH_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
const TEST_ADDRESS = "0x42f9134E9d3Bf7eEE1f8A5Ac2a4328B059E7468c"; // EOA
const TEST_VALUE = ethers.BigNumber.from("10000000000000000");

// synthetix
const VOLUME_REWARDS = ethers.constants.AddressZero;
const SYNTHETIX_PROXY = "0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4";
const ADDRESS_RESOLVER = "0x95A6a3f44a70172E7d50a9e28c85Dfd712756B8C";
const SUSD_PROXY = "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9";
const SETH_PROXY = "0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49";
const SETH_BYTES32 = "0x7345544800000000000000000000000000000000000000000000000000000000";

// 1inch specific
const AGGREGATION_ROUTER_V4 = "0x1111111254760F7ab3F16433eea9304126DCd199";
const AGGREGATION_EXECUTOR = "0x26271dfddbd250014f87f0f302c099d5a798bab1";

// https://dashboard.tenderly.co/tx/optimistic/0x05912d6180e62b79a88a63c5ea3638f2c88f9d795dec91f3068945003355867c
const ETH_TO_SUSD_ROUTE = ""
const SUSD_TO_WETH_ROUTE = "";

describe("Integration: Test Synthswap.sol", function () {
    before(async () => {
        await network.provider.request({
            method: "hardhat_reset",
            params: [
                {
                    forking: {
                        jsonRpcUrl: process.env.ARCHIVE_NODE_URL_L2,
                        // block number associated with tx: 0x05912d6180e62b79a88a63c5ea3638f2c88f9d795dec91f3068945003355867c
                        blockNumber: 6520833,
                    },
                },
            ],
        });

        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [TEST_ADDRESS],
        });
    });

    it("Test SynthSwap deployment", async () => {
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();
        expect(synthswap.address).to.exist;
    });

    it.skip("Test swap ETH into sETH", async () => {
        // ETH -(1inchAggregator)-> sUSD -(Synthetix)-> sETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        const preBalance = await sETH.balanceOf(TEST_ADDRESS);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = AGGREGATION_EXECUTOR;
        const swapDescription = {
            srcToken: ETH_ADDRESS,
            dstToken: SUSD_PROXY,
            srcReceiver: AGGREGATION_EXECUTOR,
            dstReceiver: synthswap.address,
            amount: TEST_VALUE,
            minReturnAmount: ethers.BigNumber.from("28087090916131374921"),
            flags: 0,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, ETH_TO_SUSD_ROUTE]
		);

        // swap
        const signer = await ethers.getSigner(TEST_ADDRESS);
		await synthswap.connect(signer).swapInto(
            SETH_BYTES32,
            data, 
            {
				gasLimit: 1000000,
				value: TEST_VALUE,
            }
        );
        
        // post-swap balance
        const postBalance = await sETH.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(200000);

    it.skip("Test swap sETH into WETH", async () => {
        // WETH -(1inchAggregator)-> sUSD -(Synthetix)-> sETH
        const SynthSwap = await ethers.getContractFactory("SynthSwap");
        const synthswap = await SynthSwap.deploy(
            SYNTHETIX_PROXY,
            SUSD_PROXY,
            VOLUME_REWARDS,
            AGGREGATION_ROUTER_V4,
            ADDRESS_RESOLVER
        );
        await synthswap.deployed();

        // pre-swap balance
        const IERC20ABI = (await artifacts.readArtifact("contracts/interfaces/IERC20.sol:IERC20")).abi;
        const WETH = new ethers.Contract(WETH_ADDRESS, IERC20ABI, waffle.provider);
        const preBalance = await WETH.balanceOf(TEST_ADDRESS);
        
        // approve SynthSwap to spend sETH
        const signer = await ethers.getSigner(TEST_ADDRESS);
        const sETH = new ethers.Contract(SETH_PROXY, IERC20ABI, waffle.provider);
        await sETH.connect(signer).approve(synthswap.address, TEST_VALUE);

        // confirm allowance
        const allowance = await sETH.allowance(signer.address, synthswap.address);
        expect(allowance).to.equal(TEST_VALUE);

        const abiCoder = ethers.utils.defaultAbiCoder;
        const caller = AGGREGATION_EXECUTOR;
        const swapDescription = {
            srcToken: SUSD_PROXY,
            dstToken: WETH_ADDRESS,
            srcReceiver: AGGREGATION_EXECUTOR,
            dstReceiver: TEST_ADDRESS,
            amount: 0, // TODO
            minReturnAmount: 0, // TODO
            flags: 0,
            permit: "0x"
        }
        
		const data = abiCoder.encode(
			[
				'address caller',
				'tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc',
				'bytes data',
			],
			[caller, swapDescription, SUSD_TO_WETH_ROUTE]
		);

        // swap
		await synthswap.connect(signer).swapOutOf(
            TEST_VALUE,
            SETH_BYTES32,
            data,
            {
				gasLimit: 1000000,
            }
        );
        
        // post-swap balance
        const postBalance = await WETH.balanceOf(TEST_ADDRESS);
        expect(postBalance).to.be.above(preBalance);
    }).timeout(200000);
});