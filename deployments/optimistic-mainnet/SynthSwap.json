{
  "address": "0x09a6935a1B03CC05910d8096Cfdcd86F50Fe358E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregationRouterV4",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_volumeRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapInto",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapOutOf",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "synthImplementation",
          "type": "address"
        }
      ],
      "name": "proxyForSynth",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_destSynthCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "swapInto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sourceSynthCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "swapOutOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_destSynthCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sourceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "uniswapSwapInto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sourceSynthCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_destTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOfSynth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedAmountOfSUSDFromSwap",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "uniswapSwapOutOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc996487039219c2c0191743fe74c8439ac3576c9265a1b38c5899c77f67f6cc5",
  "receipt": {
    "to": null,
    "from": "0x652c46a302060B324A02d2d3e4a56e3DA07FA91b",
    "contractAddress": "0x09a6935a1B03CC05910d8096Cfdcd86F50Fe358E",
    "transactionIndex": 0,
    "gasUsed": "2008786",
    "logsBloom": "0x00000000000000000000000000000000000000000008000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000080000000020000000000000000000000000000000000000000000000000000000000000000000000040",
    "blockHash": "0x38de12cf1b8883f286b22aefdf4d7a6a34d1e97517f597fb216ff53be14abd0e",
    "transactionHash": "0xc996487039219c2c0191743fe74c8439ac3576c9265a1b38c5899c77f67f6cc5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12159443,
        "transactionHash": "0xc996487039219c2c0191743fe74c8439ac3576c9265a1b38c5899c77f67f6cc5",
        "address": "0x09a6935a1B03CC05910d8096Cfdcd86F50Fe358E",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000652c46a302060b324a02d2d3e4a56e3da07fa91b",
        "logIndex": 0,
        "blockHash": "0x38de12cf1b8883f286b22aefdf4d7a6a34d1e97517f597fb216ff53be14abd0e"
      }
    ],
    "blockNumber": 12159443,
    "cumulativeGasUsed": "2008786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",
    "0x1111111254760F7ab3F16433eea9304126DCd199",
    "0x95A6a3f44a70172E7d50a9e28c85Dfd712756B8C",
    "0x82d2242257115351899894eF384f779b5ba8c695",
    "0x82d2242257115351899894eF384f779b5ba8c695"
  ],
  "numDeployments": 4,
  "solcInputHash": "c8ab5713a0a7df13a84c4425af8e4d4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregationRouterV4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_volumeRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapInto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapOutOf\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthImplementation\",\"type\":\"address\"}],\"name\":\"proxyForSynth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_destSynthCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swapInto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sourceSynthCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swapOutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_destSynthCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapSwapInto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sourceSynthCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfSynth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAmountOfSUSDFromSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapSwapOutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"IAggregationRouterV4 relies on calldata generated off-chain\",\"kind\":\"dev\",\"methods\":{\"proxyForSynth(address)\":{\"details\":\"only possible because Synthetix synths inherit Proxyable which track proxy()\",\"params\":{\"synthImplementation\":\"synth implementation address\"},\"returns\":{\"synthProxy\":\"proxy address\"}},\"swapInto(bytes32,bytes)\":{\"details\":\"supports ETH -> Synth conversions\",\"params\":{\"_data\":\"is the transaction data returned by the 1inch API \",\"_destSynthCurrencyKey\":\"is the bytes32 representation of a Synthetix currency key\"},\"returns\":{\"_0\":\"amount of destination synth received from swap\"}},\"swapOutOf(bytes32,uint256,bytes)\":{\"details\":\"make sure synthetix is approved to spend sourceAmountsupports Synth -> ETH conversions\",\"params\":{\"_data\":\"is the transaction data returned by the 1inch API\",\"_sourceAmount\":\"is the amount of sourceSynth to swap out of\",\"_sourceSynthCurrencyKey\":\"is the bytes32 representation of a Synthetix currency key\"},\"returns\":{\"_0\":\"amount of destination asset received from swap\"}},\"uniswapSwapInto(bytes32,address,uint256,bytes)\":{\"details\":\"supports ETH -> Synth conversions\",\"params\":{\"_amount\":\"is the amout of source token to be swapped\",\"_data\":\"is the transaction data returned by the 1inch API \",\"_destSynthCurrencyKey\":\"is the bytes32 representation of a Synthetix currency key\",\"_sourceTokenAddress\":\"is the address of the source token\"},\"returns\":{\"_0\":\"amount of destination synth received from swap\"}},\"uniswapSwapOutOf(bytes32,address,uint256,uint256,bytes)\":{\"details\":\"make sure synthetix is approved to spend sourceAmountsupports Synth -> ETH conversions\",\"params\":{\"_amountOfSynth\":\"is the amount of sourceSynth to swap out of\",\"_data\":\"is the transaction data returned by the 1inch API\",\"_expectedAmountOfSUSDFromSwap\":\"is expected amount of sUSD to be returned from 1inch portion of swap\",\"_sourceSynthCurrencyKey\":\"is the bytes32 representation of a Synthetix currency key\"},\"returns\":{\"_0\":\"amount of destination asset received from swap\"}}},\"title\":\"system to swap synths to/from many erc20 tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"proxyForSynth(address)\":{\"notice\":\"get the proxy address from the synth implementation contract\"},\"rescueFunds(address,uint256)\":{\"notice\":\"owner possesses ability to rescue tokens locked within contract \"},\"swapInto(bytes32,bytes)\":{\"notice\":\"swap into a specified synth\"},\"swapOutOf(bytes32,uint256,bytes)\":{\"notice\":\"swap out of a specified synth\"},\"uniswapSwapInto(bytes32,address,uint256,bytes)\":{\"notice\":\"swap into a specified synth\"},\"uniswapSwapOutOf(bytes32,address,uint256,uint256,bytes)\":{\"notice\":\"swap out of a specified synth\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Synthswap.sol\":\"SynthSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Synthswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISynthSwap.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ISynthetix.sol\\\";\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\nimport \\\"./interfaces/IAggregationRouterV4.sol\\\";\\nimport \\\"./interfaces/IAggregationExecutor.sol\\\";\\nimport \\\"./utils/SafeERC20.sol\\\";\\nimport \\\"./utils/Owned.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/RevertReasonParser.sol\\\";\\n\\n/// @title system to swap synths to/from many erc20 tokens\\n/// @dev IAggregationRouterV4 relies on calldata generated off-chain\\ncontract SynthSwap is ISynthSwap, Owned, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 immutable sUSD;\\n    IAggregationRouterV4 immutable router;\\n    IAddressResolver immutable addressResolver;\\n    address immutable volumeRewards;\\n    address immutable treasury;\\n\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    bytes32 private constant CONTRACT_SYNTHETIX = \\\"Synthetix\\\";\\n    bytes32 private constant sUSD_CURRENCY_KEY = \\\"sUSD\\\";\\n    bytes32 private constant TRACKING_CODE = \\\"KWENTA\\\";\\n\\n    event SwapInto(address indexed from, uint amountReceived);\\n    event SwapOutOf(address indexed from, uint amountReceived);\\n    event Received(address from, uint amountReceived);\\n    \\n    constructor (\\n        address _sUSD,\\n        address _aggregationRouterV4,\\n        address _addressResolver,\\n        address _volumeRewards,\\n        address _treasury\\n    ) Owned(msg.sender) {\\n        sUSD = IERC20(_sUSD);\\n        router = IAggregationRouterV4(_aggregationRouterV4);\\n        addressResolver = IAddressResolver(_addressResolver);\\n        volumeRewards = _volumeRewards;\\n        treasury = _treasury;\\n    }\\n\\n    //////////////////////////////////////\\n    ///////// EXTERNAL FUNCTIONS /////////\\n    //////////////////////////////////////\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    /// @inheritdoc ISynthSwap\\n    function swapInto(\\n        bytes32 _destSynthCurrencyKey,\\n        bytes calldata _data\\n    ) external payable override returns (uint) {\\n        (uint amountOut,) = swapOn1inch(_data, false);\\n\\n        // if destination synth is NOT sUSD, swap on Synthetix is necessary \\n        if (_destSynthCurrencyKey != sUSD_CURRENCY_KEY) {\\n            amountOut = swapOnSynthetix(\\n                amountOut,\\n                sUSD_CURRENCY_KEY,\\n                _destSynthCurrencyKey\\n            );\\n        }\\n\\n        address destSynthAddress = proxyForSynth(addressResolver.getSynth(_destSynthCurrencyKey));\\n        IERC20(destSynthAddress).safeTransfer(msg.sender, amountOut);\\n  \\n        emit SwapInto(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    /// @inheritdoc ISynthSwap\\n    function swapOutOf(\\n        bytes32 _sourceSynthCurrencyKey,\\n        uint _sourceAmount,\\n        bytes calldata _data\\n    ) external override nonReentrant returns (uint) {\\n        // transfer synth to this contract\\n        address sourceSynthAddress = proxyForSynth(addressResolver.getSynth(_sourceSynthCurrencyKey));\\n        IERC20(sourceSynthAddress).safeTransferFrom(msg.sender, address(this), _sourceAmount);\\n\\n        // if source synth is NOT sUSD, swap on Synthetix is necessary \\n        if (_sourceSynthCurrencyKey != sUSD_CURRENCY_KEY) {\\n            swapOnSynthetix(\\n                _sourceAmount, \\n                _sourceSynthCurrencyKey, \\n                sUSD_CURRENCY_KEY\\n            );\\n        }\\n\\n        (uint amountOut, address dstToken) = swapOn1inch(_data, true);\\n        \\n        if (dstToken == ETH_ADDRESS) {\\n            (bool success, bytes memory result) = msg.sender.call{value: amountOut}(\\\"\\\");\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"callBytes failed: \\\"));\\n            }\\n        } else {\\n            IERC20(dstToken).safeTransfer(msg.sender, amountOut);\\n        }\\n  \\n        emit SwapOutOf(msg.sender, amountOut);\\n\\n        // any remaining sUSD in contract should be transferred to treasury\\n        uint remainingBalanceSUSD = sUSD.balanceOf(address(this));\\n        if (remainingBalanceSUSD > 0) {\\n            sUSD.safeTransfer(treasury, remainingBalanceSUSD);\\n        }\\n\\n        return amountOut;\\n    }\\n\\n    /// @inheritdoc ISynthSwap\\n    function uniswapSwapInto(\\n        bytes32 _destSynthCurrencyKey,\\n        address _sourceTokenAddress,\\n        uint _amount,\\n        bytes calldata _data\\n    ) external payable override returns (uint) {\\n        // if not swapping from ETH, transfer source token to contract and approve spending\\n        if (_sourceTokenAddress != ETH_ADDRESS) {\\n            IERC20(_sourceTokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n            IERC20(_sourceTokenAddress).safeApprove(address(router), _amount);\\n        }\\n\\n        // swap ETH or source token for sUSD\\n        (bool success, bytes memory result) = address(router).call{value: msg.value}(_data);\\n        if (!success) {\\n            revert(RevertReasonParser.parse(result, \\\"callBytes failed: \\\"));\\n        }\\n\\n         // record amount of sUSD received from swap\\n        (uint amountOut) = abi.decode(result, (uint));\\n\\n        // if destination synth is NOT sUSD, swap on Synthetix is necessary \\n        if (_destSynthCurrencyKey != sUSD_CURRENCY_KEY) {\\n            amountOut = swapOnSynthetix(\\n                amountOut, \\n                sUSD_CURRENCY_KEY, \\n                _destSynthCurrencyKey\\n            );\\n        }\\n\\n        // send amount of destination synth to msg.sender\\n        address destSynthAddress = proxyForSynth(addressResolver.getSynth(_destSynthCurrencyKey));\\n        IERC20(destSynthAddress).safeTransfer(msg.sender, amountOut);\\n  \\n        emit SwapInto(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    /// @inheritdoc ISynthSwap\\n    function uniswapSwapOutOf(\\n        bytes32 _sourceSynthCurrencyKey,\\n        address _destTokenAddress,\\n        uint _amountOfSynth,\\n        uint _expectedAmountOfSUSDFromSwap,\\n        bytes calldata _data\\n    ) external override nonReentrant returns (uint) {\\n        // transfer synth to this contract\\n        address sourceSynthAddress = proxyForSynth(addressResolver.getSynth(_sourceSynthCurrencyKey));\\n        IERC20(sourceSynthAddress).transferFrom(msg.sender, address(this), _amountOfSynth);\\n\\n        // if source synth is NOT sUSD, swap on Synthetix is necessary \\n        if (_sourceSynthCurrencyKey != sUSD_CURRENCY_KEY) {\\n            swapOnSynthetix(\\n                _amountOfSynth, \\n                _sourceSynthCurrencyKey, \\n                sUSD_CURRENCY_KEY\\n            );\\n        }\\n\\n        // approve AggregationRouterV4 to spend sUSD\\n        sUSD.safeApprove(address(router), _expectedAmountOfSUSDFromSwap);\\n\\n        // swap sUSD for ETH or destination token\\n        (bool success, bytes memory result) = address(router).call(_data);\\n        if (!success) {\\n            revert(RevertReasonParser.parse(result, \\\"SynthSwap: callBytes failed: \\\"));\\n        }\\n\\n        // record amount of ETH or destination token received from swap\\n        (uint amountOut) = abi.decode(result, (uint));\\n        \\n        // send amount of ETH or destination token to msg.sender\\n        if (_destTokenAddress == ETH_ADDRESS) {\\n            (success, result) = msg.sender.call{value: amountOut}(\\\"\\\");\\n            if (!success) {\\n            revert(RevertReasonParser.parse(result, \\\"SynthSwap: callBytes failed: \\\"));\\n        }\\n        } else {\\n            IERC20(_destTokenAddress).safeTransfer(msg.sender, amountOut);\\n        }\\n\\n        emit SwapOutOf(msg.sender, amountOut);\\n\\n        // any remaining sUSD in contract should be transferred to treasury\\n        uint remainingBalanceSUSD = sUSD.balanceOf(address(this));\\n        if (remainingBalanceSUSD > 0) {\\n            sUSD.safeTransfer(treasury, remainingBalanceSUSD);\\n        }\\n\\n        return amountOut;\\n    }\\n\\n    /// @notice owner possesses ability to rescue tokens locked within contract \\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    //////////////////////////////////////\\n    ///////// INTERNAL FUNCTIONS /////////\\n    //////////////////////////////////////\\n\\n    /// @notice addressResolver fetches ISynthetix address \\n    function synthetix() internal view returns (ISynthetix) {\\n        return ISynthetix(addressResolver.requireAndGetAddress(\\n            CONTRACT_SYNTHETIX, \\n            \\\"Could not get Synthetix\\\"\\n        ));\\n    }\\n\\n    /// @notice execute swap on 1inch\\n    /// @dev token approval needed when source is not ETH\\n    /// @dev either source or destination token will ALWAYS be sUSD\\n    /// @param _data specifying swap data\\n    /// @param _areTokensInContract TODO\\n    /// @return amount received from 1inch swap\\n    function swapOn1inch(\\n        bytes calldata _data, \\n        bool _areTokensInContract\\n    ) internal returns (uint, address) {\\n        // decode _data for 1inch swap\\n        (\\n            IAggregationExecutor executor,\\n            IAggregationRouterV4.SwapDescription memory desc,\\n            bytes memory routeData\\n        ) = abi.decode(\\n            _data,\\n            (\\n                IAggregationExecutor,\\n                IAggregationRouterV4.SwapDescription,\\n                bytes\\n            )\\n        );\\n\\n        // set swap description destination address to this contract\\n        desc.dstReceiver = payable(address(this));\\n\\n        if (desc.srcToken != ETH_ADDRESS) {\\n            // if being called from swapInto, tokens have not been transfered to this contract\\n            if (!_areTokensInContract) {\\n                IERC20(desc.srcToken).safeTransferFrom(msg.sender, address(this), desc.amount);\\n            }\\n            // approve AggregationRouterV4 to spend srcToken\\n            IERC20(desc.srcToken).safeApprove(address(router), desc.amount);\\n        }\\n\\n        // execute 1inch swap\\n        (uint amountOut,) = router.swap{value: msg.value}(executor, desc, routeData);\\n\\n        require(amountOut > 0, \\\"SynthSwap: swapOn1inch failed\\\");\\n        return (amountOut, desc.dstToken);\\n    }\\n\\n    /// @notice execute swap on Synthetix\\n    /// @dev token approval is always required\\n    /// @param _amount of source synth to swap\\n    /// @param _sourceSynthCurrencyKey source synth key needed for exchange\\n    /// @param _destSynthCurrencyKey destination synth key needed for exchange\\n    /// @return amountOut: received from Synthetix swap\\n    function swapOnSynthetix(\\n        uint _amount,\\n        bytes32 _sourceSynthCurrencyKey,\\n        bytes32 _destSynthCurrencyKey\\n    ) internal returns (uint) {\\n        // execute Synthetix swap\\n        uint amountOut = synthetix().exchangeWithTracking(\\n            _sourceSynthCurrencyKey,\\n            _amount,\\n            _destSynthCurrencyKey,\\n            volumeRewards,\\n            TRACKING_CODE\\n        );\\n\\n        require(amountOut > 0, \\\"SynthSwap: swapOnSynthetix failed\\\");\\n        return amountOut;\\n    }\\n\\n    /// @notice get the proxy address from the synth implementation contract\\n    /// @dev only possible because Synthetix synths inherit Proxyable which track proxy()\\n    /// @param synthImplementation synth implementation address\\n    /// @return synthProxy proxy address\\n    function proxyForSynth(address synthImplementation) public returns (address synthProxy) {\\n        (bool success, bytes memory retVal) = synthImplementation.call(abi.encodeWithSignature(\\\"proxy()\\\"));\\n        require(success, \\\"get Proxy address failed\\\");\\n        (synthProxy) = abi.decode(retVal, (address));\\n    }\\n\\n}\",\"keccak256\":\"0x410d8df72d26de92e23b6b7496335a63cf14657ba3df343ebbb52975835ea19c\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n    function getSynth(bytes32 key) external view returns (address);\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\",\"keccak256\":\"0x7150277f0a44ab097baee37cfb52af702c0a03677f3523639c5b76886796b98e\",\"license\":\"MIT\"},\"contracts/interfaces/IAggregationExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAggregationExecutor {\\n    /// @notice Make calls on `msgSender` with specified data\\n    function callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\\n}\",\"keccak256\":\"0xb25fa2cadbb963cb9539eff22a77f8134981b6910c1af302268804751f1695ce\",\"license\":\"MIT\"},\"contracts/interfaces/IAggregationRouterV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAggregationExecutor.sol\\\";\\n\\ninterface IAggregationRouterV4 {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        IAggregationExecutor caller,\\n        SwapDescription calldata desc,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 gasLeft);\\n}\",\"keccak256\":\"0x6468fdad274c89ff1544c99861f2ba097e39f7aefd87edf3a50b2a1255b76585\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb55c91551ef864f86edd296378fc3430f19798c0d1de468ff772a83a842df24c\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title SynthSwap\\n/// @notice 1Inch + Synthetix utlity contract for going into a Synth and out of a Synth\\ninterface ISynthSwap {\\n    /// @notice swap into a specified synth\\n    /// @dev supports ETH -> Synth conversions\\n    /// @param _destSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\\n    /// @param _data is the transaction data returned by the 1inch API \\n    /// @return amount of destination synth received from swap\\n    function swapInto(\\n        bytes32 _destSynthCurrencyKey,\\n        bytes calldata _data\\n    ) external payable returns (uint);\\n\\n    /// @notice swap out of a specified synth\\n    /// @dev make sure synthetix is approved to spend sourceAmount\\n    /// @dev supports Synth -> ETH conversions\\n    /// @param _sourceSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\\n    /// @param _sourceAmount is the amount of sourceSynth to swap out of\\n    /// @param _data is the transaction data returned by the 1inch API\\n    /// @return amount of destination asset received from swap\\n    function swapOutOf(\\n        bytes32 _sourceSynthCurrencyKey,\\n        uint _sourceAmount,\\n        bytes calldata _data\\n    ) external returns (uint);\\n\\n    /// @notice swap into a specified synth\\n    /// @dev supports ETH -> Synth conversions\\n    /// @param _destSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\\n    /// @param _sourceTokenAddress is the address of the source token\\n    /// @param _amount is the amout of source token to be swapped\\n    /// @param _data is the transaction data returned by the 1inch API \\n    /// @return amount of destination synth received from swap\\n    function uniswapSwapInto(\\n        bytes32 _destSynthCurrencyKey,\\n        address _sourceTokenAddress,\\n        uint _amount,\\n        bytes calldata _data\\n    ) external payable returns (uint);\\n\\n    /// @notice swap out of a specified synth\\n    /// @dev make sure synthetix is approved to spend sourceAmount\\n    /// @dev supports Synth -> ETH conversions\\n    /// @param _sourceSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\\n    /// @param _amountOfSynth is the amount of sourceSynth to swap out of\\n    /// @param _expectedAmountOfSUSDFromSwap is expected amount of sUSD to be returned from 1inch portion of swap\\n    /// @param _data is the transaction data returned by the 1inch API\\n    /// @return amount of destination asset received from swap\\n    function uniswapSwapOutOf(\\n        bytes32 _sourceSynthCurrencyKey,\\n        address _destTokenAddress,\\n        uint _amountOfSynth,\\n        uint _expectedAmountOfSUSDFromSwap,\\n        bytes calldata _data\\n    ) external returns (uint);\\n}\",\"keccak256\":\"0x7b12e1477530df42b89c375cebb89f63ff382d1ac606e6170f75796d6b1eeb12\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISynthetix {\\n    function exchangeWithTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n}\",\"keccak256\":\"0x6e2f5dee3b06f58ad8c6fa2e28bdb02d2c871ba995bbaef8229dd9e7a3cbf0c9\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\\n/// if structured reverts appear in the future.\\n///\\n/// All unsuccessful parsings get encoded as Unknown(data) string\\nlibrary RevertReasonParser {\\n    bytes4 constant private _PANIC_SELECTOR = bytes4(keccak256(\\\"Panic(uint256)\\\"));\\n    bytes4 constant private _ERROR_SELECTOR = bytes4(keccak256(\\\"Error(string)\\\"));\\n\\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\\n        if (data.length >= 4) {\\n            bytes4 selector;\\n            assembly {  // solhint-disable-line no-inline-assembly\\n                selector := mload(add(data, 0x20))\\n            }\\n\\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\\n                uint256 offset;\\n                bytes memory reason;\\n                // solhint-disable no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    offset := mload(add(data, 36))\\n                    reason := add(data, add(36, offset))\\n                }\\n                /*\\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\\n                    https://github.com/ethereum/solidity/issues/10170\\n                    because of that we can't check for equality and instead check\\n                    that offset + string length + extra 36 bytes is less than overall data length\\n                */\\n                require(data.length >= 36 + offset + reason.length, \\\"Invalid revert reason\\\");\\n                return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n            }\\n            // 36 = 4-byte selector + 32 bytes integer\\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\\n                uint256 code;\\n                // solhint-disable no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    code := mload(add(data, 36))\\n                }\\n                return string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\n            }\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\",\"keccak256\":\"0x7ca6099636c27afa3fabf8187857c42977448fc3ad2c577b29a19b7e0061d2f2\",\"license\":\"MIT\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x87f3dea16eba5937fddc16654dbfc6855c27b8c2b62603e74566f228542ce1fb\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\",\"keccak256\":\"0x83cff50b3c1acf679e228b3a10a1ca7d53b03dfa7afb5dd4973340b201ad4f7f\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xd29d3ea88157ac9005430d38c36abbd86ab628fb5cb3c4c3fb91d2a5a09bff51\",\"license\":\"MIT\"},\"contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xd6354d43d1b73a5e5e3b41a5dce81630a40c27cfc8583cc8bd9f54b3c2f41bc5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620024d7380380620024d783398101604081905262000035916200013a565b3380620000885760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a15060016002556001600160601b0319606095861b811660805293851b841660a05291841b831660c052831b821660e05290911b1661010052620001a9565b80516001600160a01b03811681146200013557600080fd5b919050565b600080600080600060a0868803121562000152578081fd5b6200015d866200011d565b94506200016d602087016200011d565b93506200017d604087016200011d565b92506200018d606087016200011d565b91506200019d608087016200011d565b90509295509295909350565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6122786200025f600039600081816105ad0152610a420152600061108a0152600081816102f70152818161065801528181610ad501528181610df1015261171801526000818161076a0152818161079401528181610cae01528181610cd8015281816111fe01526112270152600081816104f40152818161058b01528181610748015281816109890152610a2001526122786000f3fe6080604052600436106100955760003560e01c806378e3214f1161005957806378e3214f1461019957806379ba5097146101b95780638da5cb5b146101ce578063b6479ccc146101ee578063daa61fb11461020157600080fd5b80631627540c146100d95780631fb9807b146100fb5780633d326ccd1461012e5780634ab58b971461014e57806353a47bb71461016157600080fd5b366100d457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100e557600080fd5b506100f96100f4366004611c1f565b610221565b005b34801561010757600080fd5b5061011b610116366004611d9a565b61027d565b6040519081526020015b60405180910390f35b34801561013a57600080fd5b5061011b610149366004611cdf565b6105e3565b61011b61015c366004611d50565b610a7b565b34801561016d57600080fd5b50600154610181906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b3480156101a557600080fd5b506100f96101b4366004611eed565b610b5a565b3480156101c557600080fd5b506100f9610b7a565b3480156101da57600080fd5b50600054610181906001600160a01b031681565b61011b6101fc366004611c77565b610c64565b34801561020d57600080fd5b5061018161021c366004611c1f565b610e78565b610229610f6e565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b60006002805414156102d65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60028055604051635145606160e01b81526004810186905260009061037a907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351456061906024015b60206040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190611c3b565b90506103916001600160a01b038216333088610fe2565b631cd554d160e21b86146103b3576103b18587631cd554d160e21b611053565b505b6000806103c28686600161117b565b90925090506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610493576040516000908190339085908381818185875af1925050503d8060008114610430576040519150601f19603f3d011682016040523d82523d6000602084013e610435565b606091505b50915091508161048c576104738160405180604001604052806012815260200171031b0b636213cba32b9903330b4b632b21d160751b81525061132f565b60405162461bcd60e51b81526004016102cd9190612143565b50506104a7565b6104a76001600160a01b0382163384611493565b60405182815233907f841af9c9a9b1d7e9d8916e0209707f6efdd9ef01804331bf2a0f4dc9f70892d29060200160405180910390a26040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105769190611f18565b905080156105d2576105d26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611493565b505060016002559695505050505050565b60006002805414156106375760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102cd565b60028055604051635145606160e01b81526004810188905260009061068f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063514560619060240161032a565b6040516323b872dd60e01b8152336004820152306024820152604481018890529091506001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611c57565b50631cd554d160e21b881461073b576107398689631cd554d160e21b611053565b505b61078f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000876114c8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866040516107cc929190611f7f565b6000604051808303816000865af19150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b50915091508161085757610473816040518060400160405280601d81526020017f53796e7468537761703a2063616c6c4279746573206661696c65643a2000000081525061132f565b60008180602001905181019061086d9190611f18565b90506001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156109285760405133908290600081818185875af1925050503d80600081146108d4576040519150601f19603f3d011682016040523d82523d6000602084013e6108d9565b606091505b5090935091508261092357610473826040518060400160405280601d81526020017f53796e7468537761703a2063616c6c4279746573206661696c65643a2000000081525061132f565b61093c565b61093c6001600160a01b038b163383611493565b60405181815233907f841af9c9a9b1d7e9d8916e0209707f6efdd9ef01804331bf2a0f4dc9f70892d29060200160405180910390a26040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156109d357600080fd5b505afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611f18565b90508015610a6757610a676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611493565b5060016002559a9950505050505050505050565b600080610a8a8484600061117b565b509050631cd554d160e21b8514610ab057610aad81631cd554d160e21b87611053565b90505b604051635145606160e01b815260048101869052600090610b04906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063514560619060240161032a565b9050610b1a6001600160a01b0382163384611493565b60405182815233907f7c61902edc6e3116a55da29ac3a6c37cf1574e202e5c0654203ca7658186d8b89060200160405180910390a25090505b9392505050565b610b62610f6e565b610b766001600160a01b0383163383611493565b5050565b6001546001600160a01b03163314610bf25760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527402063616e20616363657074206f776e65727368697605c1b60648201526084016102cd565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610cd357610c9f6001600160a01b038616333087610fe2565b610cd36001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000866114c8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316348686604051610d11929190611f7f565b60006040518083038185875af1925050503d8060008114610d4e576040519150601f19603f3d011682016040523d82523d6000602084013e610d53565b606091505b509150915081610d91576104738160405180604001604052806012815260200171031b0b636213cba32b9903330b4b632b21d160751b81525061132f565b600081806020019051810190610da79190611f18565b9050631cd554d160e21b8914610dcc57610dc981631cd554d160e21b8b611053565b90505b604051635145606160e01b8152600481018a9052600090610e20906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063514560619060240161032a565b9050610e366001600160a01b0382163384611493565b60405182815233907f7c61902edc6e3116a55da29ac3a6c37cf1574e202e5c0654203ca7658186d8b89060200160405180910390a25098975050505050505050565b60408051600481526024810182526020810180516001600160e01b031663ec55688960e01b1790529051600091829182916001600160a01b03861691610ebe9190611f8f565b6000604051808303816000865af19150503d8060008114610efb576040519150601f19603f3d011682016040523d82523d6000602084013e610f00565b606091505b509150915081610f525760405162461bcd60e51b815260206004820152601860248201527f6765742050726f78792061646472657373206661696c6564000000000000000060448201526064016102cd565b80806020019051810190610f669190611c3b565b949350505050565b6000546001600160a01b03163314610fe05760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201526e37b936903a3434b99030b1ba34b7b760891b60648201526084016102cd565b565b6040516001600160a01b038085166024830152831660448201526064810182905261104d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115ec565b50505050565b60008061105e6116be565b60405163018756bb60e51b81526004810186905260248101879052604481018590526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152654b57454e544160d01b608483015291909116906330ead7609060a401602060405180830381600087803b1580156110e757600080fd5b505af11580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f9190611f18565b905060008111610f665760405162461bcd60e51b815260206004820152602160248201527f53796e7468537761703a20737761704f6e53796e746865746978206661696c656044820152601960fa1b60648201526084016102cd565b60008080808061118d87890189611deb565b306060830152815192955090935091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461122357856111e557608082015182516111e5916001600160a01b039091169033903090610fe2565b60808201518251611223916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906114c8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637c025200348686866040518563ffffffff1660e01b815260040161127693929190612080565b60408051808303818588803b15801561128e57600080fd5b505af11580156112a2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112c79190611f30565b5090506000811161131a5760405162461bcd60e51b815260206004820152601d60248201527f53796e7468537761703a20737761704f6e31696e6368206661696c656400000060448201526064016102cd565b60209092015191989197509095505050505050565b606060048351106114605760208301516001600160e01b0319811662461bcd60e51b14801561136057506044845110155b1561140057602484810151808601820180519192909190611382908490612180565b61138c9190612180565b865110156113d45760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103932bb32b93a103932b0b9b7b760591b60448201526064016102cd565b84816040516020016113e792919061204b565b604051602081830303815290604052935050505061148d565b6001600160e01b03198116634e487b7160e01b148015611421575083516024145b1561145e576024840151836114358261179f565b604051602001611446929190611fab565b6040516020818303038152906040529250505061148d565b505b8161146a846117c7565b60405160200161147b929190611ffa565b60405160208183030381529060405290505b92915050565b6040516001600160a01b0383166024820152604481018290526114c390849063a9059cbb60e01b90606401611016565b505050565b8015806115515750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190611f18565b155b6115bc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102cd565b6040516001600160a01b0383166024820152604481018290526114c390849063095ea7b360e01b90606401611016565b6000611641826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a2d9092919063ffffffff16565b8051909150156114c3578080602001905181019061165f9190611c57565b6114c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102cd565b6040805163dacb2d0160e01b8152680a6f2dce8d0cae8d2f60bb1b60048201526024810191909152601760448201527f436f756c64206e6f74206765742053796e74686574697800000000000000000060648201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dacb2d019060840160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611c3b565b905090565b606061148d826040516020016117b791815260200190565b6040516020818303038152906040525b80516060906f181899199a1a9b1b9c1cb0b131b232b360811b906000906117ef906002612198565b6117fa906002612180565b67ffffffffffffffff81111561182057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561184a576020820181803683370190505b509050600360fc1b8160008151811061187357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060005b8451811015611a25578260048683815181106118f657634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916901c60f81c6010811061192857634e487b7160e01b600052603260045260246000fd5b1a60f81b82611938836002612198565b611943906002612180565b8151811061196157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508285828151811061199957634e487b7160e01b600052603260045260246000fd5b60209101015160f81c600f16601081106119c357634e487b7160e01b600052603260045260246000fd5b1a60f81b826119d3836002612198565b6119de906003612180565b815181106119fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611a1d816121e3565b9150506118ca565b509392505050565b6060610f668484600085856001600160a01b0385163b611a8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102cd565b600080866001600160a01b03168587604051611aab9190611f8f565b60006040518083038185875af1925050503d8060008114611ae8576040519150601f19603f3d011682016040523d82523d6000602084013e611aed565b606091505b5091509150611afd828286611b08565b979650505050505050565b60608315611b17575081610b53565b825115611b275782518084602001fd5b8160405162461bcd60e51b81526004016102cd9190612143565b8035611b4c8161222a565b919050565b60008083601f840112611b62578182fd5b50813567ffffffffffffffff811115611b79578182fd5b602083019150836020828501011115611b9157600080fd5b9250929050565b600082601f830112611ba8578081fd5b813567ffffffffffffffff80821115611bc357611bc3612214565b604051601f8301601f19908116603f01168101908282118183101715611beb57611beb612214565b81604052838152866020858801011115611c03578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611c30578081fd5b8135610b538161222a565b600060208284031215611c4c578081fd5b8151610b538161222a565b600060208284031215611c68578081fd5b81518015158114610b53578182fd5b600080600080600060808688031215611c8e578081fd5b853594506020860135611ca08161222a565b935060408601359250606086013567ffffffffffffffff811115611cc2578182fd5b611cce88828901611b51565b969995985093965092949392505050565b60008060008060008060a08789031215611cf7578081fd5b863595506020870135611d098161222a565b94506040870135935060608701359250608087013567ffffffffffffffff811115611d32578182fd5b611d3e89828a01611b51565b979a9699509497509295939492505050565b600080600060408486031215611d64578283fd5b83359250602084013567ffffffffffffffff811115611d81578283fd5b611d8d86828701611b51565b9497909650939450505050565b60008060008060608587031215611daf578384fd5b8435935060208501359250604085013567ffffffffffffffff811115611dd3578283fd5b611ddf87828801611b51565b95989497509550505050565b600080600060608486031215611dff578283fd5b8335611e0a8161222a565b9250602084013567ffffffffffffffff80821115611e26578384fd5b908501906101008288031215611e3a578384fd5b611e42612156565b611e4b83611b41565b8152611e5960208401611b41565b6020820152611e6a60408401611b41565b6040820152611e7b60608401611b41565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013582811115611eaf578586fd5b611ebb89828601611b98565b60e08301525093506040860135915080821115611ed6578283fd5b50611ee386828701611b98565b9150509250925092565b60008060408385031215611eff578182fd5b8235611f0a8161222a565b946020939093013593505050565b600060208284031215611f29578081fd5b5051919050565b60008060408385031215611f42578182fd5b505080516020909101519092909150565b60008151808452611f6b8160208601602086016121b7565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251611fa18184602087016121b7565b9190910192915050565b60008351611fbd8184602088016121b7565b650a0c2dcd2c6560d31b9083019081528351611fe08160068401602088016121b7565b602960f81b60069290910191820152600701949350505050565b6000835161200c8184602088016121b7565b670aadcd6dcdeeedc560c31b90830190815283516120318160088401602088016121b7565b602960f81b60089290910191820152600901949350505050565b6000835161205d8184602088016121b7565b6508ae4e4dee4560d31b9083019081528351611fe08160068401602088016121b7565b6001600160a01b038481168252606060208084018290528551909216908301528301516000906120bb60808401826001600160a01b03169052565b5060408401516001600160a01b03811660a08401525060608401516001600160a01b03811660c084015250608084015160e083015260a0840151610100818185015260c086015161012085015260e086015191508061014085015250612125610160840182611f53565b905082810360408401526121398185611f53565b9695505050505050565b602081526000610b536020830184611f53565b604051610100810167ffffffffffffffff8111828210171561217a5761217a612214565b60405290565b60008219821115612193576121936121fe565b500190565b60008160001904831182151516156121b2576121b26121fe565b500290565b60005b838110156121d25781810151838201526020016121ba565b8381111561104d5750506000910152565b60006000198214156121f7576121f76121fe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461223f57600080fd5b5056fea2646970667358221220f71b5e79a997a05de31f63ceefb3cdc050eef940d4771decdbd03970a35ffaf664736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c806378e3214f1161005957806378e3214f1461019957806379ba5097146101b95780638da5cb5b146101ce578063b6479ccc146101ee578063daa61fb11461020157600080fd5b80631627540c146100d95780631fb9807b146100fb5780633d326ccd1461012e5780634ab58b971461014e57806353a47bb71461016157600080fd5b366100d457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100e557600080fd5b506100f96100f4366004611c1f565b610221565b005b34801561010757600080fd5b5061011b610116366004611d9a565b61027d565b6040519081526020015b60405180910390f35b34801561013a57600080fd5b5061011b610149366004611cdf565b6105e3565b61011b61015c366004611d50565b610a7b565b34801561016d57600080fd5b50600154610181906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b3480156101a557600080fd5b506100f96101b4366004611eed565b610b5a565b3480156101c557600080fd5b506100f9610b7a565b3480156101da57600080fd5b50600054610181906001600160a01b031681565b61011b6101fc366004611c77565b610c64565b34801561020d57600080fd5b5061018161021c366004611c1f565b610e78565b610229610f6e565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b60006002805414156102d65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60028055604051635145606160e01b81526004810186905260009061037a907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351456061906024015b60206040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190611c3b565b90506103916001600160a01b038216333088610fe2565b631cd554d160e21b86146103b3576103b18587631cd554d160e21b611053565b505b6000806103c28686600161117b565b90925090506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610493576040516000908190339085908381818185875af1925050503d8060008114610430576040519150601f19603f3d011682016040523d82523d6000602084013e610435565b606091505b50915091508161048c576104738160405180604001604052806012815260200171031b0b636213cba32b9903330b4b632b21d160751b81525061132f565b60405162461bcd60e51b81526004016102cd9190612143565b50506104a7565b6104a76001600160a01b0382163384611493565b60405182815233907f841af9c9a9b1d7e9d8916e0209707f6efdd9ef01804331bf2a0f4dc9f70892d29060200160405180910390a26040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105769190611f18565b905080156105d2576105d26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611493565b505060016002559695505050505050565b60006002805414156106375760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102cd565b60028055604051635145606160e01b81526004810188905260009061068f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063514560619060240161032a565b6040516323b872dd60e01b8152336004820152306024820152604481018890529091506001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611c57565b50631cd554d160e21b881461073b576107398689631cd554d160e21b611053565b505b61078f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000876114c8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866040516107cc929190611f7f565b6000604051808303816000865af19150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b50915091508161085757610473816040518060400160405280601d81526020017f53796e7468537761703a2063616c6c4279746573206661696c65643a2000000081525061132f565b60008180602001905181019061086d9190611f18565b90506001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156109285760405133908290600081818185875af1925050503d80600081146108d4576040519150601f19603f3d011682016040523d82523d6000602084013e6108d9565b606091505b5090935091508261092357610473826040518060400160405280601d81526020017f53796e7468537761703a2063616c6c4279746573206661696c65643a2000000081525061132f565b61093c565b61093c6001600160a01b038b163383611493565b60405181815233907f841af9c9a9b1d7e9d8916e0209707f6efdd9ef01804331bf2a0f4dc9f70892d29060200160405180910390a26040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156109d357600080fd5b505afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611f18565b90508015610a6757610a676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611493565b5060016002559a9950505050505050505050565b600080610a8a8484600061117b565b509050631cd554d160e21b8514610ab057610aad81631cd554d160e21b87611053565b90505b604051635145606160e01b815260048101869052600090610b04906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063514560619060240161032a565b9050610b1a6001600160a01b0382163384611493565b60405182815233907f7c61902edc6e3116a55da29ac3a6c37cf1574e202e5c0654203ca7658186d8b89060200160405180910390a25090505b9392505050565b610b62610f6e565b610b766001600160a01b0383163383611493565b5050565b6001546001600160a01b03163314610bf25760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527402063616e20616363657074206f776e65727368697605c1b60648201526084016102cd565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610cd357610c9f6001600160a01b038616333087610fe2565b610cd36001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000866114c8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316348686604051610d11929190611f7f565b60006040518083038185875af1925050503d8060008114610d4e576040519150601f19603f3d011682016040523d82523d6000602084013e610d53565b606091505b509150915081610d91576104738160405180604001604052806012815260200171031b0b636213cba32b9903330b4b632b21d160751b81525061132f565b600081806020019051810190610da79190611f18565b9050631cd554d160e21b8914610dcc57610dc981631cd554d160e21b8b611053565b90505b604051635145606160e01b8152600481018a9052600090610e20906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063514560619060240161032a565b9050610e366001600160a01b0382163384611493565b60405182815233907f7c61902edc6e3116a55da29ac3a6c37cf1574e202e5c0654203ca7658186d8b89060200160405180910390a25098975050505050505050565b60408051600481526024810182526020810180516001600160e01b031663ec55688960e01b1790529051600091829182916001600160a01b03861691610ebe9190611f8f565b6000604051808303816000865af19150503d8060008114610efb576040519150601f19603f3d011682016040523d82523d6000602084013e610f00565b606091505b509150915081610f525760405162461bcd60e51b815260206004820152601860248201527f6765742050726f78792061646472657373206661696c6564000000000000000060448201526064016102cd565b80806020019051810190610f669190611c3b565b949350505050565b6000546001600160a01b03163314610fe05760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201526e37b936903a3434b99030b1ba34b7b760891b60648201526084016102cd565b565b6040516001600160a01b038085166024830152831660448201526064810182905261104d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115ec565b50505050565b60008061105e6116be565b60405163018756bb60e51b81526004810186905260248101879052604481018590526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152654b57454e544160d01b608483015291909116906330ead7609060a401602060405180830381600087803b1580156110e757600080fd5b505af11580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f9190611f18565b905060008111610f665760405162461bcd60e51b815260206004820152602160248201527f53796e7468537761703a20737761704f6e53796e746865746978206661696c656044820152601960fa1b60648201526084016102cd565b60008080808061118d87890189611deb565b306060830152815192955090935091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461122357856111e557608082015182516111e5916001600160a01b039091169033903090610fe2565b60808201518251611223916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906114c8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637c025200348686866040518563ffffffff1660e01b815260040161127693929190612080565b60408051808303818588803b15801561128e57600080fd5b505af11580156112a2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112c79190611f30565b5090506000811161131a5760405162461bcd60e51b815260206004820152601d60248201527f53796e7468537761703a20737761704f6e31696e6368206661696c656400000060448201526064016102cd565b60209092015191989197509095505050505050565b606060048351106114605760208301516001600160e01b0319811662461bcd60e51b14801561136057506044845110155b1561140057602484810151808601820180519192909190611382908490612180565b61138c9190612180565b865110156113d45760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103932bb32b93a103932b0b9b7b760591b60448201526064016102cd565b84816040516020016113e792919061204b565b604051602081830303815290604052935050505061148d565b6001600160e01b03198116634e487b7160e01b148015611421575083516024145b1561145e576024840151836114358261179f565b604051602001611446929190611fab565b6040516020818303038152906040529250505061148d565b505b8161146a846117c7565b60405160200161147b929190611ffa565b60405160208183030381529060405290505b92915050565b6040516001600160a01b0383166024820152604481018290526114c390849063a9059cbb60e01b90606401611016565b505050565b8015806115515750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190611f18565b155b6115bc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102cd565b6040516001600160a01b0383166024820152604481018290526114c390849063095ea7b360e01b90606401611016565b6000611641826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a2d9092919063ffffffff16565b8051909150156114c3578080602001905181019061165f9190611c57565b6114c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102cd565b6040805163dacb2d0160e01b8152680a6f2dce8d0cae8d2f60bb1b60048201526024810191909152601760448201527f436f756c64206e6f74206765742053796e74686574697800000000000000000060648201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dacb2d019060840160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611c3b565b905090565b606061148d826040516020016117b791815260200190565b6040516020818303038152906040525b80516060906f181899199a1a9b1b9c1cb0b131b232b360811b906000906117ef906002612198565b6117fa906002612180565b67ffffffffffffffff81111561182057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561184a576020820181803683370190505b509050600360fc1b8160008151811061187357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060005b8451811015611a25578260048683815181106118f657634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916901c60f81c6010811061192857634e487b7160e01b600052603260045260246000fd5b1a60f81b82611938836002612198565b611943906002612180565b8151811061196157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508285828151811061199957634e487b7160e01b600052603260045260246000fd5b60209101015160f81c600f16601081106119c357634e487b7160e01b600052603260045260246000fd5b1a60f81b826119d3836002612198565b6119de906003612180565b815181106119fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611a1d816121e3565b9150506118ca565b509392505050565b6060610f668484600085856001600160a01b0385163b611a8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102cd565b600080866001600160a01b03168587604051611aab9190611f8f565b60006040518083038185875af1925050503d8060008114611ae8576040519150601f19603f3d011682016040523d82523d6000602084013e611aed565b606091505b5091509150611afd828286611b08565b979650505050505050565b60608315611b17575081610b53565b825115611b275782518084602001fd5b8160405162461bcd60e51b81526004016102cd9190612143565b8035611b4c8161222a565b919050565b60008083601f840112611b62578182fd5b50813567ffffffffffffffff811115611b79578182fd5b602083019150836020828501011115611b9157600080fd5b9250929050565b600082601f830112611ba8578081fd5b813567ffffffffffffffff80821115611bc357611bc3612214565b604051601f8301601f19908116603f01168101908282118183101715611beb57611beb612214565b81604052838152866020858801011115611c03578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611c30578081fd5b8135610b538161222a565b600060208284031215611c4c578081fd5b8151610b538161222a565b600060208284031215611c68578081fd5b81518015158114610b53578182fd5b600080600080600060808688031215611c8e578081fd5b853594506020860135611ca08161222a565b935060408601359250606086013567ffffffffffffffff811115611cc2578182fd5b611cce88828901611b51565b969995985093965092949392505050565b60008060008060008060a08789031215611cf7578081fd5b863595506020870135611d098161222a565b94506040870135935060608701359250608087013567ffffffffffffffff811115611d32578182fd5b611d3e89828a01611b51565b979a9699509497509295939492505050565b600080600060408486031215611d64578283fd5b83359250602084013567ffffffffffffffff811115611d81578283fd5b611d8d86828701611b51565b9497909650939450505050565b60008060008060608587031215611daf578384fd5b8435935060208501359250604085013567ffffffffffffffff811115611dd3578283fd5b611ddf87828801611b51565b95989497509550505050565b600080600060608486031215611dff578283fd5b8335611e0a8161222a565b9250602084013567ffffffffffffffff80821115611e26578384fd5b908501906101008288031215611e3a578384fd5b611e42612156565b611e4b83611b41565b8152611e5960208401611b41565b6020820152611e6a60408401611b41565b6040820152611e7b60608401611b41565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013582811115611eaf578586fd5b611ebb89828601611b98565b60e08301525093506040860135915080821115611ed6578283fd5b50611ee386828701611b98565b9150509250925092565b60008060408385031215611eff578182fd5b8235611f0a8161222a565b946020939093013593505050565b600060208284031215611f29578081fd5b5051919050565b60008060408385031215611f42578182fd5b505080516020909101519092909150565b60008151808452611f6b8160208601602086016121b7565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251611fa18184602087016121b7565b9190910192915050565b60008351611fbd8184602088016121b7565b650a0c2dcd2c6560d31b9083019081528351611fe08160068401602088016121b7565b602960f81b60069290910191820152600701949350505050565b6000835161200c8184602088016121b7565b670aadcd6dcdeeedc560c31b90830190815283516120318160088401602088016121b7565b602960f81b60089290910191820152600901949350505050565b6000835161205d8184602088016121b7565b6508ae4e4dee4560d31b9083019081528351611fe08160068401602088016121b7565b6001600160a01b038481168252606060208084018290528551909216908301528301516000906120bb60808401826001600160a01b03169052565b5060408401516001600160a01b03811660a08401525060608401516001600160a01b03811660c084015250608084015160e083015260a0840151610100818185015260c086015161012085015260e086015191508061014085015250612125610160840182611f53565b905082810360408401526121398185611f53565b9695505050505050565b602081526000610b536020830184611f53565b604051610100810167ffffffffffffffff8111828210171561217a5761217a612214565b60405290565b60008219821115612193576121936121fe565b500190565b60008160001904831182151516156121b2576121b26121fe565b500290565b60005b838110156121d25781810151838201526020016121ba565b8381111561104d5750506000910152565b60006000198214156121f7576121f76121fe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461223f57600080fd5b5056fea2646970667358221220f71b5e79a997a05de31f63ceefb3cdc050eef940d4771decdbd03970a35ffaf664736f6c63430008040033",
  "devdoc": {
    "details": "IAggregationRouterV4 relies on calldata generated off-chain",
    "kind": "dev",
    "methods": {
      "proxyForSynth(address)": {
        "details": "only possible because Synthetix synths inherit Proxyable which track proxy()",
        "params": {
          "synthImplementation": "synth implementation address"
        },
        "returns": {
          "synthProxy": "proxy address"
        }
      },
      "swapInto(bytes32,bytes)": {
        "details": "supports ETH -> Synth conversions",
        "params": {
          "_data": "is the transaction data returned by the 1inch API ",
          "_destSynthCurrencyKey": "is the bytes32 representation of a Synthetix currency key"
        },
        "returns": {
          "_0": "amount of destination synth received from swap"
        }
      },
      "swapOutOf(bytes32,uint256,bytes)": {
        "details": "make sure synthetix is approved to spend sourceAmountsupports Synth -> ETH conversions",
        "params": {
          "_data": "is the transaction data returned by the 1inch API",
          "_sourceAmount": "is the amount of sourceSynth to swap out of",
          "_sourceSynthCurrencyKey": "is the bytes32 representation of a Synthetix currency key"
        },
        "returns": {
          "_0": "amount of destination asset received from swap"
        }
      },
      "uniswapSwapInto(bytes32,address,uint256,bytes)": {
        "details": "supports ETH -> Synth conversions",
        "params": {
          "_amount": "is the amout of source token to be swapped",
          "_data": "is the transaction data returned by the 1inch API ",
          "_destSynthCurrencyKey": "is the bytes32 representation of a Synthetix currency key",
          "_sourceTokenAddress": "is the address of the source token"
        },
        "returns": {
          "_0": "amount of destination synth received from swap"
        }
      },
      "uniswapSwapOutOf(bytes32,address,uint256,uint256,bytes)": {
        "details": "make sure synthetix is approved to spend sourceAmountsupports Synth -> ETH conversions",
        "params": {
          "_amountOfSynth": "is the amount of sourceSynth to swap out of",
          "_data": "is the transaction data returned by the 1inch API",
          "_expectedAmountOfSUSDFromSwap": "is expected amount of sUSD to be returned from 1inch portion of swap",
          "_sourceSynthCurrencyKey": "is the bytes32 representation of a Synthetix currency key"
        },
        "returns": {
          "_0": "amount of destination asset received from swap"
        }
      }
    },
    "title": "system to swap synths to/from many erc20 tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "proxyForSynth(address)": {
        "notice": "get the proxy address from the synth implementation contract"
      },
      "rescueFunds(address,uint256)": {
        "notice": "owner possesses ability to rescue tokens locked within contract "
      },
      "swapInto(bytes32,bytes)": {
        "notice": "swap into a specified synth"
      },
      "swapOutOf(bytes32,uint256,bytes)": {
        "notice": "swap out of a specified synth"
      },
      "uniswapSwapInto(bytes32,address,uint256,bytes)": {
        "notice": "swap into a specified synth"
      },
      "uniswapSwapOutOf(bytes32,address,uint256,uint256,bytes)": {
        "notice": "swap out of a specified synth"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1558,
        "contract": "contracts/Synthswap.sol:SynthSwap",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1560,
        "contract": "contracts/Synthswap.sol:SynthSwap",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1673,
        "contract": "contracts/Synthswap.sol:SynthSwap",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}