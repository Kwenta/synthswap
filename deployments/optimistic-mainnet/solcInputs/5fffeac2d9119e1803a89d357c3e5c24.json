{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n    function getSynth(bytes32 key) external view returns (address);\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n"
    },
    "contracts/Synthswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/ISynthSwap.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ISynthetix.sol\";\nimport \"./interfaces/IAddressResolver.sol\";\nimport \"./interfaces/IAggregationRouterV4.sol\";\nimport \"./interfaces/IAggregationExecutor.sol\";\nimport \"./utils/SafeERC20.sol\";\nimport \"./utils/Owned.sol\";\nimport \"./utils/ReentrancyGuard.sol\";\nimport \"./libraries/RevertReasonParser.sol\";\n\n/// @title system to swap synths to/from many erc20 tokens\n/// @dev IAggregationRouterV4 relies on calldata generated off-chain\ncontract SynthSwap is ISynthSwap, Owned, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    IERC20 immutable sUSD;\n    IAggregationRouterV4 immutable router;\n    IAddressResolver immutable addressResolver;\n    address immutable volumeRewards;\n    address immutable treasury;\n\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant sUSD_CURRENCY_KEY = \"sUSD\";\n    bytes32 private constant TRACKING_CODE = \"KWENTA\";\n\n    event SwapInto(address indexed from, uint amountReceived);\n    event SwapOutOf(address indexed from, uint amountReceived);\n    event Received(address from, uint amountReceived);\n    \n    constructor (\n        address _sUSD,\n        address _aggregationRouterV4,\n        address _addressResolver,\n        address _volumeRewards,\n        address _treasury\n    ) Owned(msg.sender) {\n        sUSD = IERC20(_sUSD);\n        router = IAggregationRouterV4(_aggregationRouterV4);\n        addressResolver = IAddressResolver(_addressResolver);\n        volumeRewards = _volumeRewards;\n        treasury = _treasury;\n    }\n\n    //////////////////////////////////////\n    ///////// EXTERNAL FUNCTIONS /////////\n    //////////////////////////////////////\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    /// @inheritdoc ISynthSwap\n    function swapInto(\n        bytes32 _destSynthCurrencyKey,\n        bytes calldata _data\n    ) external payable override returns (uint) {\n        (uint amountOut,) = swapOn1inch(_data, false);\n\n        // if destination synth is NOT sUSD, swap on Synthetix is necessary \n        if (_destSynthCurrencyKey != sUSD_CURRENCY_KEY) {\n            amountOut = swapOnSynthetix(\n                amountOut,\n                sUSD_CURRENCY_KEY,\n                _destSynthCurrencyKey,\n                address(sUSD)\n            );\n        }\n\n        address destSynthAddress = proxyForSynth(addressResolver.getSynth(_destSynthCurrencyKey));\n        IERC20(destSynthAddress).safeTransfer(msg.sender, amountOut);\n  \n        emit SwapInto(msg.sender, amountOut);\n        return amountOut;\n    }\n\n    /// @inheritdoc ISynthSwap\n    function swapOutOf(\n        bytes32 _sourceSynthCurrencyKey,\n        uint _sourceAmount,\n        bytes calldata _data\n    ) external override nonReentrant returns (uint) {\n        // transfer synth to this contract\n        address sourceSynthAddress = proxyForSynth(addressResolver.getSynth(_sourceSynthCurrencyKey));\n        IERC20(sourceSynthAddress).safeTransferFrom(msg.sender, address(this), _sourceAmount);\n\n        // if source synth is NOT sUSD, swap on Synthetix is necessary \n        if (_sourceSynthCurrencyKey != sUSD_CURRENCY_KEY) {\n            swapOnSynthetix(\n                _sourceAmount, \n                _sourceSynthCurrencyKey, \n                sUSD_CURRENCY_KEY, \n                sourceSynthAddress\n            );\n        }\n\n        (uint amountOut, address dstToken) = swapOn1inch(_data, true);\n        \n        if (dstToken == ETH_ADDRESS) {\n            (bool success, bytes memory result) = msg.sender.call{value: amountOut}(\"\");\n            if (!success) {\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\n            }\n        } else {\n            IERC20(dstToken).safeTransfer(msg.sender, amountOut);\n        }\n  \n        emit SwapOutOf(msg.sender, amountOut);\n\n        // any remaining sUSD in contract should be transferred to treasury\n        uint remainingBalanceSUSD = sUSD.balanceOf(address(this));\n        if (remainingBalanceSUSD > 0) {\n            sUSD.safeTransfer(treasury, remainingBalanceSUSD);\n        }\n\n        return amountOut;\n    }\n\n    /// @inheritdoc ISynthSwap\n    function uniswapSwapInto(\n        bytes32 _destSynthCurrencyKey,\n        address _sourceTokenAddress,\n        uint _amount,\n        bytes calldata _data\n    ) external payable override returns (uint) {\n        // if not swapping from ETH, transfer source token to contract and approve spending\n        if (_sourceTokenAddress != ETH_ADDRESS) {\n            IERC20(_sourceTokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\n            IERC20(_sourceTokenAddress).safeApprove(address(router), _amount);\n        }\n\n        // swap ETH or source token for sUSD\n        (bool success, bytes memory result) = address(router).call{value: msg.value}(_data);\n        if (!success) {\n            revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\n        }\n\n         // record amount of sUSD received from swap\n        (uint amountOut) = abi.decode(result, (uint));\n\n        // if destination synth is NOT sUSD, swap on Synthetix is necessary \n        if (_destSynthCurrencyKey != sUSD_CURRENCY_KEY) {\n            amountOut = swapOnSynthetix(\n                amountOut, \n                sUSD_CURRENCY_KEY, \n                _destSynthCurrencyKey, \n                address(sUSD)\n            );\n        }\n\n        // send amount of destination synth to msg.sender\n        address destSynthAddress = proxyForSynth(addressResolver.getSynth(_destSynthCurrencyKey));\n        IERC20(destSynthAddress).safeTransfer(msg.sender, amountOut);\n  \n        emit SwapInto(msg.sender, amountOut);\n        return amountOut;\n    }\n\n    /// @inheritdoc ISynthSwap\n    function uniswapSwapOutOf(\n        bytes32 _sourceSynthCurrencyKey,\n        address _destTokenAddress,\n        uint _amountOfSynth,\n        uint _expectedAmountOfSUSDFromSwap,\n        bytes calldata _data\n    ) external override nonReentrant returns (uint) {\n        // transfer synth to this contract\n        address sourceSynthAddress = proxyForSynth(addressResolver.getSynth(_sourceSynthCurrencyKey));\n        IERC20(sourceSynthAddress).transferFrom(msg.sender, address(this), _amountOfSynth);\n\n        // if source synth is NOT sUSD, swap on Synthetix is necessary \n        if (_sourceSynthCurrencyKey != sUSD_CURRENCY_KEY) {\n            swapOnSynthetix(\n                _amountOfSynth, \n                _sourceSynthCurrencyKey, \n                sUSD_CURRENCY_KEY, \n                sourceSynthAddress\n            );\n        }\n\n        // approve AggregationRouterV4 to spend sUSD\n        sUSD.safeApprove(address(router), _expectedAmountOfSUSDFromSwap);\n\n        // swap sUSD for ETH or destination token\n        (bool success, bytes memory result) = address(router).call(_data);\n        if (!success) {\n            revert(RevertReasonParser.parse(result, \"SynthSwap: callBytes failed: \"));\n        }\n\n        // record amount of ETH or destination token received from swap\n        (uint amountOut) = abi.decode(result, (uint));\n        \n        // send amount of ETH or destination token to msg.sender\n        if (_destTokenAddress == ETH_ADDRESS) {\n            (success, result) = msg.sender.call{value: amountOut}(\"\");\n            if (!success) {\n            revert(RevertReasonParser.parse(result, \"SynthSwap: callBytes failed: \"));\n        }\n        } else {\n            IERC20(_destTokenAddress).safeTransfer(msg.sender, amountOut);\n        }\n\n        emit SwapOutOf(msg.sender, amountOut);\n\n        // any remaining sUSD in contract should be transferred to treasury\n        uint remainingBalanceSUSD = sUSD.balanceOf(address(this));\n        if (remainingBalanceSUSD > 0) {\n            sUSD.safeTransfer(treasury, remainingBalanceSUSD);\n        }\n\n        return amountOut;\n    }\n\n    /// @notice owner possesses ability to rescue tokens locked within contract \n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\n        token.safeTransfer(msg.sender, amount);\n    }\n\n    //////////////////////////////////////\n    ///////// INTERNAL FUNCTIONS /////////\n    //////////////////////////////////////\n\n    /// @notice addressResolver fetches ISynthetix address \n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(addressResolver.requireAndGetAddress(\n            CONTRACT_SYNTHETIX, \n            \"Could not get Synthetix\"\n        ));\n    }\n\n    /// @notice execute swap on 1inch\n    /// @dev token approval needed when source is not ETH\n    /// @dev either source or destination token will ALWAYS be sUSD\n    /// @param _data specifying swap data\n    /// @param _areTokensInContract TODO\n    /// @return amount received from 1inch swap\n    function swapOn1inch(\n        bytes calldata _data, \n        bool _areTokensInContract\n    ) internal returns (uint, address) {\n        // decode _data for 1inch swap\n        (\n            IAggregationExecutor executor,\n            IAggregationRouterV4.SwapDescription memory desc,\n            bytes memory routeData\n        ) = abi.decode(\n            _data,\n            (\n                IAggregationExecutor,\n                IAggregationRouterV4.SwapDescription,\n                bytes\n            )\n        );\n\n        // set swap description destination address to this contract\n        desc.dstReceiver = payable(address(this));\n\n        if (desc.srcToken != ETH_ADDRESS) {\n            // if being called from swapInto, tokens have not been transfered to this contract\n            if (!_areTokensInContract) {\n                IERC20(desc.srcToken).safeTransferFrom(msg.sender, address(this), desc.amount);\n            }\n            // approve AggregationRouterV4 to spend srcToken\n            IERC20(desc.srcToken).safeApprove(address(router), desc.amount);\n        }\n\n        // execute 1inch swap\n        (uint amountOut,) = router.swap{value: msg.value}(executor, desc, routeData);\n\n        require(amountOut > 0, \"SynthSwap: swapOn1inch failed\");\n        return (amountOut, desc.dstToken);\n    }\n\n    /// @notice execute swap on Synthetix\n    /// @dev token approval is always required\n    /// @param _amount of source synth to swap\n    /// @param _sourceSynthCurrencyKey source synth key needed for exchange\n    /// @param _destSynthCurrencyKey destination synth key needed for exchange\n    /// @param _sourceSynthAddress source synth address needed for approval\n    /// @return amountOut: received from Synthetix swap\n    function swapOnSynthetix(\n        uint _amount,\n        bytes32 _sourceSynthCurrencyKey,\n        bytes32 _destSynthCurrencyKey,\n        address _sourceSynthAddress\n    ) internal returns (uint) {\n        //  approve Synthetix to spend sourceSynth\n        IERC20(_sourceSynthAddress).safeApprove(address(synthetix()), _amount);\n\n        // execute Synthetix swap\n        uint amountOut = synthetix().exchangeWithTracking(\n            _sourceSynthCurrencyKey,\n            _amount,\n            _destSynthCurrencyKey,\n            volumeRewards,\n            TRACKING_CODE\n        );\n\n        require(amountOut > 0, \"SynthSwap: swapOnSynthetix failed\");\n        return amountOut;\n    }\n\n    /// @notice get the proxy address from the synth implementation contract\n    /// @dev only possible because Synthetix synths inherit Proxyable which track proxy()\n    /// @param synthImplementation synth implementation address\n    /// @return synthProxy proxy address\n    function proxyForSynth(address synthImplementation) public returns (address synthProxy) {\n        (bool success, bytes memory retVal) = synthImplementation.call(abi.encodeWithSignature(\"proxy()\"));\n        require(success, \"get Proxy address failed\");\n        (synthProxy) = abi.decode(retVal, (address));\n    }\n\n}"
    },
    "contracts/interfaces/ISynthSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title SynthSwap\n/// @notice 1Inch + Synthetix utlity contract for going into a Synth and out of a Synth\ninterface ISynthSwap {\n    /// @notice swap into a specified synth\n    /// @dev supports ETH -> Synth conversions\n    /// @param _destSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\n    /// @param _data is the transaction data returned by the 1inch API \n    /// @return amount of destination synth received from swap\n    function swapInto(\n        bytes32 _destSynthCurrencyKey,\n        bytes calldata _data\n    ) external payable returns (uint);\n\n    /// @notice swap out of a specified synth\n    /// @dev make sure synthetix is approved to spend sourceAmount\n    /// @dev supports Synth -> ETH conversions\n    /// @param _sourceSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\n    /// @param _sourceAmount is the amount of sourceSynth to swap out of\n    /// @param _data is the transaction data returned by the 1inch API\n    /// @return amount of destination asset received from swap\n    function swapOutOf(\n        bytes32 _sourceSynthCurrencyKey,\n        uint _sourceAmount,\n        bytes calldata _data\n    ) external returns (uint);\n\n    /// @notice swap into a specified synth\n    /// @dev supports ETH -> Synth conversions\n    /// @param _destSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\n    /// @param _sourceTokenAddress is the address of the source token\n    /// @param _amount is the amout of source token to be swapped\n    /// @param _data is the transaction data returned by the 1inch API \n    /// @return amount of destination synth received from swap\n    function uniswapSwapInto(\n        bytes32 _destSynthCurrencyKey,\n        address _sourceTokenAddress,\n        uint _amount,\n        bytes calldata _data\n    ) external payable returns (uint);\n\n    /// @notice swap out of a specified synth\n    /// @dev make sure synthetix is approved to spend sourceAmount\n    /// @dev supports Synth -> ETH conversions\n    /// @param _sourceSynthCurrencyKey is the bytes32 representation of a Synthetix currency key\n    /// @param _amountOfSynth is the amount of sourceSynth to swap out of\n    /// @param _expectedAmountOfSUSDFromSwap is expected amount of sUSD to be returned from 1inch portion of swap\n    /// @param _data is the transaction data returned by the 1inch API\n    /// @return amount of destination asset received from swap\n    function uniswapSwapOutOf(\n        bytes32 _sourceSynthCurrencyKey,\n        address _destTokenAddress,\n        uint _amountOfSynth,\n        uint _expectedAmountOfSUSDFromSwap,\n        bytes calldata _data\n    ) external returns (uint);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/ISynthetix.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISynthetix {\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n}"
    },
    "contracts/interfaces/IAggregationRouterV4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IAggregationExecutor.sol\";\n\ninterface IAggregationRouterV4 {\n    struct SwapDescription {\n        address srcToken;\n        address dstToken;\n        address payable srcReceiver;\n        address payable dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n        bytes permit;\n    }\n\n    function swap(\n        IAggregationExecutor caller,\n        SwapDescription calldata desc,\n        bytes calldata data\n    ) external payable returns (uint256 returnAmount, uint256 gasLeft);\n}"
    },
    "contracts/interfaces/IAggregationExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAggregationExecutor {\n    /// @notice Make calls on `msgSender` with specified data\n    function callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\n}"
    },
    "contracts/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
    },
    "contracts/libraries/RevertReasonParser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\n/// if structured reverts appear in the future.\n///\n/// All unsuccessful parsings get encoded as Unknown(data) string\nlibrary RevertReasonParser {\n    bytes4 constant private _PANIC_SELECTOR = bytes4(keccak256(\"Panic(uint256)\"));\n    bytes4 constant private _ERROR_SELECTOR = bytes4(keccak256(\"Error(string)\"));\n\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\n        if (data.length >= 4) {\n            bytes4 selector;\n            assembly {  // solhint-disable-line no-inline-assembly\n                selector := mload(add(data, 0x20))\n            }\n\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\n                uint256 offset;\n                bytes memory reason;\n                // solhint-disable no-inline-assembly\n                assembly {\n                    // 36 = 32 bytes data length + 4-byte selector\n                    offset := mload(add(data, 36))\n                    reason := add(data, add(36, offset))\n                }\n                /*\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\n                    https://github.com/ethereum/solidity/issues/10170\n                    because of that we can't check for equality and instead check\n                    that offset + string length + extra 36 bytes is less than overall data length\n                */\n                require(data.length >= 36 + offset + reason.length, \"Invalid revert reason\");\n                return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\n            }\n            // 36 = 4-byte selector + 32 bytes integer\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\n                uint256 code;\n                // solhint-disable no-inline-assembly\n                assembly {\n                    // 36 = 32 bytes data length + 4-byte selector\n                    code := mload(add(data, 36))\n                }\n                return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\n            }\n        }\n\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\n    }\n\n    function _toHex(uint256 value) private pure returns(string memory) {\n        return _toHex(abi.encodePacked(value));\n    }\n\n    function _toHex(bytes memory data) private pure returns(string memory) {\n        bytes16 alphabet = 0x30313233343536373839616263646566;\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\n        }\n        return string(str);\n    }\n}"
    },
    "contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}